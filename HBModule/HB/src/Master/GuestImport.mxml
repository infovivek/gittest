<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:WrbComp="WrbComp.*"
			   xmlns:Controls="fx.com.adobe.Controls.*"
			   xmlns:WrbHelpComp="WrbHelpComp.*"
			   width="967" height="534" minWidth="955" minHeight="600" creationComplete="Pageload()"
			   keyDown="application1_keyDownHandler(event)" pageTitle="Import Guest">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	<fx:Style source="..\\Common\\ApplicationCSS.css" />
	<fx:Script source="..\\Common\\CommonScript.as" />
	<fx:Script source="..\\Common\\Functions.as"/>
	<fx:Script>
		
		<![CDATA[
			import WrbComp.frmsearchwindow;
			
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import flash.events.Event;
			import flash.net.FileFilter;
			import flash.net.FileReference;
			import flash.utils.ByteArray;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Text;
			import mx.core.Repeater;
			import mx.graphics.shaderClasses.SaturationShader;
			import mx.utils.OrderedObject;
			import mx.utils.object_proxy;
			
			import spark.events.GridEvent;
			private var ef:ExcelFile;        
			private var ba:ByteArray;        
			private var fr:FileReference;    
			
			public var FltNm:String="";
			private var FilterAC:ArrayCollection;
			private var firstTime:Boolean = true;
			private var myArrayCollection:ArrayCollection;
			
			import mx.events.CloseEvent;
			public var ErrStr:String="";
			public static var GlobalXml:String="";					
			public static var Global_AC:ArrayCollection=new ArrayCollection();
			private var SubGroupId:int=0; 
			private var Id:int=0,Code:int=0; 
			public var AddMode:Boolean = true;
			private var SearchPopUp:frmsearchwindow = new frmsearchwindow();
			public var myFileReference:FileReference = new FileReference(); 
			private var HdrpkId:Number=0; 
			public var grid:ArrayCollection = new ArrayCollection();
			private const FILE_URL:String = "http://sstage.in/Guest_Import/ImportGuest.xls";
			public  var fileRef:FileReference=new FileReference();
			private var urlReq:URLRequest;
			public var ClientId:int=0,ClientName:String="";
			
			public function Pageload():void
			{
				Global_AC=funLoginInfo("<FlexServiceUrl>http://192.168.1.135/WebService/clsDataInterface.asmx?WSDL</FlexServiceUrl><FlexSwfUrl>http://192.168.1.135/wrperp/</FlexSwfUrl><gVchTypCd>PO</gVchTypCd><gVchTypDesc>Purchase Order</gVchTypDesc><gVchTypFk>387</gVchTypFk><gLocFk>1</gLocFk><gUmpFk></gUmpFk><gFyrFk>2</gFyrFk><gUsr>ADMIN</gUsr><gUsrFk>4</gUsrFk><gCur>Indian Rupees</gCur><gCurFk>1</gCurFk><gCurRt> 1.0000000</gCurRt><gPrintPath></gPrintPath><gScrId>551</gScrId><gCPRights>10101111</gCPRights>")
				var sav =Global_AC[0].sav;
				GlobalXml="";
				GlobalXml += "<ROOT>";
				GlobalXml += ObjToXmlStr_Comm(Global_AC,"GlobalXml")
				GlobalXml += "</ROOT>";
				ef = new ExcelFile();                                    
				ba = new ByteArray();                                    
				fr = new FileReference(); 
				init();
				statsCollection = new ArrayCollection();  
				SCtrl.setButtonRights("Delete",true);
				SCtrl.setButtonRights("Reload",true);
				SCtrl.setButtonRights("Search",true);
				SCtrl.setButtonRights("Refresh",true);
				useWeb("ImportGuest","PAGELOAD_CUSTOM",[GlobalXml,"PAGELOAD",0,0]);
			}
			
			private function Custom_WebSer_Result (Ds_Objects:Object):void
			{
				if (Ds_Objects.currentTarget.description.toString() == "PAGELOAD_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						Hlp_ClientName.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;	
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "Save_CUSTOM")
				{
					if(AddMode==true)
					{
						alignAlert(Alert.show("Saved Successfully",null,Alert.OK, null, null,iconTickLarge, Alert.OK),10,"");	
					}
					else
					{
						alignAlert(Alert.show("Updated Successfully",null,Alert.OK, null, null,iconTickLarge, Alert.OK),10,"");
					}	
					Clear();
				}
				if (Ds_Objects.currentTarget.description.toString() == "Search_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{	
						FilterAC=Import_Grd1.dataProvider as ArrayCollection 
						Import_Grd1.dataProvider(Ds_Objects.result.Tables.Table1.Rows as ArrayCollection)
						Id=Ds_Objects.result.Tables.Table.Rows[0].Id; 
						myArrayCollection=Import_Grd1.dataProvider as ArrayCollection
						
						AddMode=false; 
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "Delete_CUSTOM")
				{	
					alignAlert(Alert.show("Delete Successfully",null,Alert.OK, null, null,iconTickLarge, Alert.OK),10,"");
					Clear();	
				}		 
			}
			
			protected function application1_keyDownHandler(event:KeyboardEvent):void
			{
				SCtrl.KeyHandler(event);
			}	
			
			protected function Save():void
			{	
				Validatecheck();
			}
			private function Search()
			{				
				Clear();
				
				PopUpManager.addPopUp( SearchPopUp , this, true);
				SearchPopUp.Prc_name=""
				var SearchParam:Array =new Array();
				SearchPopUp.HlpIndex="SEARCH"
				SearchParam[0]=0;
				SearchParam[1]="";
				SearchParam[2]=0;
				SearchParam[3]=0;				
				SearchPopUp.Prc_Param=SearchParam
				SearchPopUp.HlpSrchGlobal=""
				SearchPopUp.dataPanel.focusEnabled=true
				SearchPopUp.Pageint()					
				SearchPopUp.addEventListener("PopupEnter",funpopupEnter);
				SearchPopUp.addEventListener("PopupClose",funpopupClose);
				PopUpManager.centerPopUp(SearchPopUp); 
			}
			private function funpopupClose(event:Event)
			{ 
			}
			private function funpopupEnter(event:Event)
			{				
				SearchDtls(SearchPopUp.SelectRow.loginDate,0);			
			}
			private function SearchDtls(_BIHPk:String,_PrdFk:int):void
			{
				var Load:Array =new Array();
				Load[0]=1; Load[1]=_BIHPk; Load[2]=0; Load[3]=0;  				
				useWeb("ImportGuest","Search_CUSTOM",Load);
			}
			private function removeDgridItem(event:CloseEvent):void 
			{	
				if (event.detail==Alert.YES) 
				{	
					var Load:Array = new Array();
					Load[0]= Id; Load[1]=""; Load[2]= 0; Load[3]= 0; 
					useWeb("ImportGuest","Delete_CUSTOM",Load);
				}
			} 
			protected function Clear():void
			{
				Border1.enabled=true;
				Hlp_ClientName.Select_Row.Client="";
				Hlp_ClientName.text="";
				ClientId=0;
				Hlp_ClientName.dataProvider=null;
				Import_Grd1.dataProvider=null;
				statsCollection.removeAll();
				TempArr.removeAll();					
				ef.sheets.length;
				HdrpkId=0;
				Id=0;
				
				ef = new ExcelFile();                                    
				ba = new ByteArray();                                    
				fr = new FileReference(); 
				Tempar.removeAll();
				myArrayCollection=null;
				AddMode=true;
				ClientName="";
				Pageload();
			}
			[Bindable] 
			private var statsCollection:ArrayCollection; 
			private function importXLS(e:Event):void                                                     
			{               
				//Clear();
				Import_Grd1.dataProvider=null;
				var fileFilter:FileFilter = new FileFilter("Excel (.xls)", "*.xls;");                         
				fr.addEventListener(Event.SELECT, selectXLS);                                                 
				fr.browse([fileFilter]);                                                                      
			}   
			
			private function selectXLS(e:Event):void
			{  
				if(fr.type==".xls")
				{
					fr = FileReference(e.target);                                                                 
					fr.addEventListener(Event.COMPLETE, fileIn);                                                  
					fr.load();                                                                                    
				}    
				else
				{
					ErrStr=ErrStr+"*File is not Excel Format\n"
					return;
				}
			}
			public var TempArr:ArrayCollection=new ArrayCollection();
			private function fileIn(e:Event):void
			{
				try
				{
					ba = fr.data;                                                                                 
					ef.loadFromByteArray(ba);                                                                     
					var sheet:Sheet = ef.sheets[0];                                                               
					var tCols:int = sheet.cols;                                                                   
					var tRows:int = sheet.rows;                                                                  
					tRows=tRows-1;
					//statusLabel.text = ef.sheets.length + " sheets; " + tCols + " columns; " + tRows + " rows";   
					
					statsCollection = new ArrayCollection();                                                      
					
					for(var i:int=1; i<=tRows; i++)
					{     
						Border1.enabled=false;
						var statsEntry:Object = new Object();                                                   
						statsEntry.EmpCode = sheet.getCell(i,0).value;                                                
						statsEntry.FirstName = sheet.getCell(i,1).value;                        
						statsEntry.LastName = sheet.getCell(i,2).value;                                               
						statsEntry.Grade = sheet.getCell(i,3).value;                                                
						statsEntry.MobileNo = sheet.getCell(i,4).value;                                               
						statsEntry.EmailId = sheet.getCell(i,5).value;                                                
						statsEntry.Designation = sheet.getCell(i,6).value;  
						statsEntry.Nationality=sheet.getCell(i,7).value;
						statsEntry.Column1=sheet.getCell(i,8).value;
						statsEntry.Column2=sheet.getCell(i,9).value;
						statsEntry.Column3=sheet.getCell(i,10).value;
						statsEntry.Column4=sheet.getCell(i,11).value;
						statsEntry.Column5=sheet.getCell(i,12).value;
						statsEntry.Column6=sheet.getCell(i,13).value;
						statsEntry.Column7=sheet.getCell(i,14).value;
						statsEntry.Column8=sheet.getCell(i,15).value;
						statsEntry.Column9=sheet.getCell(i,16).value;
						statsEntry.Column10=sheet.getCell(i,17).value;
						statsEntry.Id=0;
						if(statsEntry.Name != "")                                                                 
						{                                                                                             
							statsCollection.addItem(statsEntry);                                                  
						}   
					}
					var secondcode:Array= new Array();
					var tempCode:Array= new Array();
					secondcode =statsCollection.source;
					tempCode  =statsCollection.source; 
				
					Border1.enabled=true;
				}
				catch(Exception)
				{
					alignAlert(Alert.show("Data Is Incorrect",null,Alert.OK, null, null,iconErrLarge, Alert.OK),10,"");
				}
			}    
			public var ErrStr1:String="";
			public var Tempar:ArrayCollection=new ArrayCollection();
			
			private function Validatecheck():void
			{   
				var ErrStr:String="",TxtFlag:Boolean=true;
				
				if(ClientName=="")
				{
					if(TxtFlag=true)
					{
						Hlp_ClientName.setFocus();
						TxtFlag=false;
					}
					ErrStr=ErrStr+" *   Client Name is Required \n";
				}
				if(ErrStr!="")
				{
					alignAlert(Alert.show(ErrStr,"Requierd Field(s) !",Alert.OK, null, null,iconErrLarge, Alert.OK),10,"");
					return;
				}
				if(ErrStr =="")
				{
					if((Import_Grd1.dataProvider==null)||(Import_Grd1.dataProvider.length==0))
					{
						alignAlert(Alert.show("Import the Excel Sheet ",null,Alert.OK, null, null,iconWarning, Alert.OK),10,"");
						return
					}
				}
				Tempar.removeAll();
				
				grid = Import_Grd1.dataProvider as ArrayCollection;
				var arr:Array= new Array();
				arr=grid.source; 

						alignAlert(Alert.show("Do you want to Save this item?", "Warning",Alert.YES | Alert.NO, null,
							Savesuccess, iconWarning, Alert.NO),10,"");

					return;  	
			}
			private function Savesuccess(event:CloseEvent):void 
			{	
				if (event.detail==Alert.YES) 
				{	
					var statsEntry:Object = new Object(); 
//					var arrcopysave:ArrayCollection = new ArrayCollection
//						([{
//							EmpCode:statsEntry.EmpCode
//						}])
						var Arr:ArrayCollection= new ArrayCollection;
					Arr=Import_Grd1.dataProvider as ArrayCollection;
				
					var arrcopy:ArrayCollection = new ArrayCollection
						([{ 
							ClientId:ClientId 
						}])
						
					GlobalXml="";
					GlobalXml += "<ROOT>";
					GlobalXml += ObjToXmlStr_Comm(Global_AC,"GlobalXml")
					GlobalXml += "</ROOT>";		
					
					
					var GridXml:String=""
					GridXml += "<ROOT>";	
					GridXml += ObjToXmlStr_Comm(Arr,"HdrXml") 
					GridXml += "</ROOT>";
					
					var HdrXml1:String=""
					HdrXml1 += "<ROOT>";	
					HdrXml1 += ObjToXmlStr_Comm(arrcopy,"Client") 
					HdrXml1 += "</ROOT>";
					
					useWeb("ImportGuest","Save_CUSTOM",[GlobalXml,GridXml,HdrXml1]); 
				} 
			}
						
			var tempAC:ArrayCollection=new ArrayCollection();
			public var FltCode:String="";
			private function filter(Filt:String):void
			{ 
				FltCode=Filt;	
				tempAC = Import_Grd1.dataProvider as ArrayCollection;			
			
				tempAC.refresh();  
			}	

			private function ClientData1():void
			{
				if(Hlp_ClientName.selected())
				{
					ClientName="";ClientId=0;
					ClientId=Hlp_ClientName.Select_Row.Id;
					ClientName=Hlp_ClientName.Select_Row.Client;
					Hlp_ClientName.text=ClientName;
				}
				else
				{
					Hlp_ClientName.text="";
					ClientId=0;
				}
			}
			private function init():void {
				urlReq = new URLRequest(FILE_URL);
				fileRef.addEventListener(Event.CANCEL, doEvent);
				fileRef.addEventListener(Event.COMPLETE, doEvent);
				fileRef.addEventListener(Event.OPEN, doEvent);
				fileRef.addEventListener(Event.SELECT, doEvent);
				fileRef.addEventListener(HTTPStatusEvent.HTTP_STATUS, doEvent);
				fileRef.addEventListener(IOErrorEvent.IO_ERROR, doEvent);
				fileRef.addEventListener(ProgressEvent.PROGRESS, doEvent);
				fileRef.addEventListener(SecurityErrorEvent.SECURITY_ERROR, doEvent);
			}
			private function doEvent(evt:Event):void{
				//Alert.show(evt.toString());
			}
			private function downloadSourceCodeZip():void
			{	
				fileRef.download(urlReq);
			}
		]]>
	</fx:Script>
	<s:VGroup x="0" y="0" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:BorderContainer id="Border1" y="2" width="100%" height="417" backgroundColor="#fbf9f9"
						   borderVisible="false">
		<mx:Button x="718" y="38" width="111" height="25" label="Browse" click="importXLS(event)"/>
		<mx:DataGrid dataProvider="{statsCollection}" x="72" y="96" width="787" height="309" id="Import_Grd1"
					 horizontalScrollPolicy="on">
			<mx:columns>
				<mx:DataGridColumn headerText="EmpCode" dataField="EmpCode" width="120" />
				<mx:DataGridColumn headerText="First Name" dataField="FirstName" width="150"/>
				<mx:DataGridColumn headerText="Last Name" dataField="LastName" width="150"/>
				<mx:DataGridColumn headerText="Grade" dataField="Grade" width="75"/>
				<mx:DataGridColumn headerText="MobileNo" dataField="MobileNo" width="150"/> 
				<mx:DataGridColumn headerText="EmailID" dataField="EmailId" width="140"/>
				<mx:DataGridColumn headerText="Designation" dataField="Designation" width="140"/>
				<mx:DataGridColumn headerText="Nationality" dataField="Nationality" width="140"/>
				<mx:DataGridColumn headerText="Column1" dataField="Column1" width="140"/>
				<mx:DataGridColumn headerText="Column2" dataField="Column2" width="140"/>
				<mx:DataGridColumn headerText="Column3" dataField="Column3" width="140"/>
				<mx:DataGridColumn headerText="Column4" dataField="Column4" width="140"/>
				<mx:DataGridColumn headerText="Column5" dataField="Column5" width="140"/>
				<mx:DataGridColumn headerText="Column6" dataField="Column6" width="140"/>
				<mx:DataGridColumn headerText="Column7" dataField="Column7" width="140"/>
				<mx:DataGridColumn headerText="Column8" dataField="Column8" width="140"/>
				<mx:DataGridColumn headerText="Column9" dataField="Column9" width="140"/>
				<mx:DataGridColumn headerText="Column10" dataField="Column10" width="140"/> 
				<mx:DataGridColumn headerText="Id" dataField="Id" visible="false"/> 
			</mx:columns>
		</mx:DataGrid> 
		<WrbHelpComp:HelpText id="Hlp_ClientName" x="362" y="38" width="282" height="20" pxTabIndex="1"
							  onselection="{ClientData1()}" pxSetColumnsWidth="282" depth="10" 
							  pxSetPrompt="Select Client">
		</WrbHelpComp:HelpText>
		<mx:Label x="299" y="41" text="Client"/>
		<mx:Label x="336" y="36" text="*" color="red"/>
		
		<mx:Button id="downloadBtn" x="67" y="32" width="163" height="36"
				   label="Download Sample Excel" click="downloadSourceCodeZip()"
				   toolTip="{FILE_URL}"/>
		<mx:Label x="67" y="71" text="* Restricted to upload 2500 user data on each excel upload" color="red"/>
		<s:Label x="18" y="12" text="Guest Import" color="red"/>
			
	</s:BorderContainer> 
		<s:HGroup x="0" y="478" width="100%" height="50" horizontalAlign="center" verticalAlign="middle">
		<WrbComp:SaveControl x="186" y="6" depth="1" id="SCtrl" tabIndex="9" docSave="Save()" 
							 doSearch="Search()" docClear="Clear()">
		</WrbComp:SaveControl>
	</s:HGroup>
		</s:VGroup>
</s:Application>
