<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:Controls="fx.com.adobe.Controls.*"
			   xmlns:WrbHelpComp="WrbHelpComp.*"
			   xmlns:WrbComp="WrbComp.*"
			   xmlns:ns1="*"
			   width="100%" height="524" creationComplete="PageLoad(event)"
			   pageTitle="Petty Cash Report">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script source = "..\\Common\\CommonScript.as"/>
	<fx:Script source = "..\\Common\\Functions.as"/>
	<fx:Style source="..\\Common\\ApplicationCSS.css"/>
	<fx:Script>
		<![CDATA[
		
			import WrbComp.FormPrintView;
			import WrbComp.frmsearchwindow;
			
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			import com.as3xls.xls.Type;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Accordion;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			import mx.printing.*;
			import mx.rpc.http.mxml.HTTPService;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			private var SearchPopUp:frmsearchwindow = new frmsearchwindow();
			public static var Global_AC:ArrayCollection = new ArrayCollection();
			public static var GlobalXml:String = "",TypeServiceId:int=0,ErrStr:String="";
			public var Id:int=0,ErrMsg:String="",PropertyId:int=0,PropertyName:String="",UserId:int=0;
			public var AddMode:Boolean=true,Flag:Boolean=true,UserName:String="";
			public var FromDate:String="",ToDate:String="";
			private var fileRef:FileReference = new FileReference();
			private var urlReq:URLRequest;
			private var arrColl:ArrayCollection;
			private var FILE_URL:String = "";
			[Bindable]
			private var fileTypes:Array = new Array();
			public var footerHeight:Number = 20;
			public var prodIndex:Number;
			public var prodTotal:Number = 0;
			private var xlsFile:ExcelFile;
			public var uploadURL:URLRequest = new URLRequest();
			
			private var imageTypes:FileFilter = new FileFilter("Images (*.jpg; *.jpeg; *.gif; *.png)" ,"*.jpg; *.jpeg; *.gif; *.png");
			private var documentTypes:FileFilter = new FileFilter("Documents (*.pdf), (*.doc), (*.rtf), (*.txt)",("*.pdf; *.doc; *.rtf, *.txt"));
			protected function PageLoad(event:FlexEvent):void
			{
				Global_AC=funLoginInfo("<FlexServiceUrl>http://192.168.1.135/WebService/clsDataInterface.asmx?WSDL</FlexServiceUrl><FlexSwfUrl>http://192.168.1.135/wrperp/</FlexSwfUrl><gVchTypCd>PO</gVchTypCd><gVchTypDesc>Purchase Order</gVchTypDesc><gVchTypFk>387</gVchTypFk><gLocFk>1</gLocFk><gUmpFk></gUmpFk><gFyrFk>2</gFyrFk><gUsr>ADMIN</gUsr><gUsrFk>4</gUsrFk><gCur>Indian Rupees</gCur><gCurFk>1</gCurFk><gCurRt> 1.0000000</gCurRt><gPrintPath></gPrintPath><gScrId>551</gScrId><gCPRights>10101111</gCPRights>")
				GlobalXml="";
				GlobalXml += "<ROOT>";
				GlobalXml += ObjToXmlStr_Comm(Global_AC,"GlobalXml")
				GlobalXml += "</ROOT>";
				Rbtn_First.selected=true;
				Help();	
				
			}
			public function Help():void
			{
				useWeb("PettyCashReport","PAGELOAD_CUSTOM",[GlobalXml,'PAGELOAD',0,Global_AC[0].UsrId,'','','']);//32]);
			}
			private function Custom_WebSer_Result (Ds_Objects:Object):void
			{
				if (Ds_Objects.currentTarget.description.toString() == "PAGELOAD_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{	
						hlp_Property.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;
					}
					if (Ds_Objects.result.Tables.Table1.Rows.length > 0)
					{	
						Grd_Details.dataProvider=Ds_Objects.result.Tables.Table1.Rows as ArrayCollection;
					}
					if (Ds_Objects.result.Tables.Table2.Rows.length > 0)
					{	
						hlp_User.dataProvider=Ds_Objects.result.Tables.Table2.Rows as ArrayCollection;
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "USERLOAD_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						hlp_User.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "Gridload_CUSTOM")
				{
					Grd_Details.dataProvider=null;
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{	
						Grd_Details.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "HistoryLoad_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						Grd_History.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "SpendHistoryLoad_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						Grd_SpendHistory.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;
					}
					if (Ds_Objects.result.Tables.Table1.Rows.length > 0)
					{
						Txt_User.text=Ds_Objects.result.Tables.Table1.Rows[0].UserName;
					}
					if (Ds_Objects.result.Tables.Table2.Rows.length > 0)
					{	
						Txt_property.text=Ds_Objects.result.Tables.Table2.Rows[0].Propertyname;
					}
					if (Ds_Objects.result.Tables.Table3.Rows.length > 0)
					{
						Grd_SpendHistory1.dataProvider=Ds_Objects.result.Tables.Table3.Rows as ArrayCollection;
					}
					if (Ds_Objects.result.Tables.Table4.Rows.length > 0)
					{
						Txt_OpenBalance.text=Ds_Objects.result.Tables.Table4.Rows[0].OpeningBalance;
					}
					if (Ds_Objects.result.Tables.Table5.Rows.length > 0)
					{
						Txt_CloseBalance.text=Ds_Objects.result.Tables.Table5.Rows[0].Balance;
					}
					var TotPaid:Number=0,TotAmt:Number=0;
					var Ac_Tmp:ArrayCollection=new ArrayCollection();
					Ac_Tmp=Grd_SpendHistory.dataProvider as ArrayCollection;
					lbl_Amount.text="";
					lbl_Paid.text="";
					for(var i:int=0;i<Ac_Tmp.length;i++)
					{
						TotAmt+=Number(Ac_Tmp[i].ApprovedAmount);
						TotPaid+=Number(Ac_Tmp[i].PaidAmount);
					}
					var OB:Number=Number(Txt_OpenBalance.text);
					var VG:Number=TotAmt+OB;
					lbl_Amount.text=VG.toString();
					var VNG:Number=TotPaid;
					lbl_Paid.text=VNG.toString();
					
				}
				if (Ds_Objects.currentTarget.description.toString() == "Download_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						FILE_URL=Ds_Objects.result.Tables.Table.Rows[0].BillLogo;
						init1();
					}
					Brd_imageUpload .visible=true;
				}
			}
			public function Details(Event):void
			{ 
				var Date:String=Grd_Details.selectedItem.SubmittedOn;
				PropertyId=Grd_Details.selectedItem.PropertyId;
				UserId=Grd_Details.selectedItem.UserId;
				useWeb("PettyCashReport","HistoryLoad_CUSTOM",[GlobalXml,"Action",PropertyId,UserId,Date,'','']);
				bdr_History.visible=true;
				Grd_History.visible=true;
				Grd_SpendHistory.visible=false;
				Grd_Details.visible=false;
				
			}
			public function Spend(Event):void
			{ 
				var Date1:String=Grd_Details.selectedItem.SubmittedOn;
				PropertyId=Grd_Details.selectedItem.PropertyId;
				UserId=Grd_Details.selectedItem.UserId;
				useWeb("PettyCashReport","SpendHistoryLoad_CUSTOM",[GlobalXml,"SpendReport",PropertyId,UserId,Date1,'','']);
				bdr_SpendHistory.visible=true;
				Grd_SpendHistory.visible=true;
				bdr_History.visible=false;
				Grd_History.visible=false;
				Grd_Details.visible=false;
								
			}
			
			public function FnClosetariff_clickHandler(event):void
			{
				bdr_History.visible=false;
				Grd_History.dataProvider=null;
				Grd_Details.visible=true;
				Clear();
			}
			public function FnClosetariff_clickHandler1(event):void
			{
				bdr_History.visible=false;
				bdr_SpendHistory.visible=false;
				Grd_SpendHistory.dataProvider=null
				Grd_History.dataProvider=null;
				Grd_Details.visible=true;
				Clear();
			}
//			public function doPrint():void 
//			{
//				
//				if(Grd_Details.dataProvider !=null)
//				{
//				// Create a FlexPrintJob instance.
//				var printJob:FlexPrintJob = new FlexPrintJob();
//				
//				// Start the print job.
//				if (printJob.start()) {
//					// Create a FormPrintView control 
//					// as a child of the application.
//					var thePrintView:FormPrintView = new FormPrintView();
//					addElement(thePrintView);
//					
//					// Set the print view properties.
//					thePrintView.width=printJob.pageWidth;
//					thePrintView.height=printJob.pageHeight;
//					thePrintView.prodTotal = prodTotal;
//					
//					// Set the data provider of the FormPrintView 
//					// component's DataGrid to be the data provider of 
//					// the displayed DataGrid.
//					thePrintView.myDataGrid.dataProvider = 
//						Grd_Details.dataProvider;
//					
//					// Create a single-page image.
//					thePrintView.showPage("single");
//					
//					// If the print image's DataGrid can hold all the  
//					// data provider's rows, add the page to the print job. 
//					if(!thePrintView.myDataGrid.validNextPage)
//					{
//						printJob.addObject(thePrintView);
//					}
//						// Otherwise, the job requires multiple pages.
//					else
//					{
//						// Create the first page and add it to the print job.
//						thePrintView.showPage("first");
//						printJob.addObject(thePrintView);
//						thePrintView.pageNumber++;
//						
//						// Loop through the following code 
//						// until all pages are queued.
//						while(true)
//						{
//							// Move the next page of data to the top of 
//							// the PrintDataGrid.
//							thePrintView.myDataGrid.nextPage();
//							
//							// Try creating a last page.
//							thePrintView.showPage("last");  
//							
//							// If the page holds the remaining data, or if 
//							// the last page was completely filled by the last  
//							// grid data, queue it for printing.
//							// Test if there is data for another 
//							// PrintDataGrid page.
//							if(!thePrintView.myDataGrid.validNextPage) 
//							{
//								// This is the last page; 
//								// queue it and exit the print loop.
//								printJob.addObject(thePrintView);
//								break;
//							}
//							else
//								// This is not the last page. Queue a middle page. 
//							{
//								thePrintView.showPage("middle");
//								printJob.addObject(thePrintView);
//								thePrintView.pageNumber++;
//							}
//						}
//					}
//					// All pages are queued; remove the FormPrintView 
//					// control to free memory.
//					removeElement(thePrintView);
//				}
//				// Send the job to the printer.
//				printJob.send();
//				Grd_Details.dataProvider=null;
//				PropertyId=0;
//				UserId=0;
//				hlp_property.text="";
//				hlp_User.text="";
//				}
//				else
//				{
//					alignAlert(Alert.show("PettyCash Requested Details Required.","Message !",
//						Alert.OK, null, null, iconErrLarge, Alert.OK),10,"");
//				}
//			}

			public var bytes:ByteArray = new ByteArray();
			public function roExport_export_Result(event:MouseEvent):void
			{
				if(Grd_SpendHistory1.dataProvider !=null)
				{
					var arrExportResult:ArrayCollection = Grd_SpendHistory1.dataProvider as ArrayCollection;
					xlsFile = new ExcelFile();
					var sheet:Sheet = new Sheet();
					
					sheet.resize(arrExportResult.length+1,7);
					
					sheet.setCell(0,0,'');
					sheet.setCell(0,1,'');
					sheet.setCell(0,2,'');
					sheet.setCell(0,3,'');
					sheet.setCell(0,4,'');
					sheet.setCell(0,5,'');
				
					
					for(var i:int=0;i<arrExportResult.length;i++)
					{
						sheet.setCell(i+1, 0, arrExportResult[i].SNo);
						sheet.setCell(i+1, 1, arrExportResult[i].Date);
						sheet.setCell(i+1, 2, arrExportResult[i].ExpenseHead);
						sheet.setCell(i+1, 3, arrExportResult[i].Description);
						sheet.setCell(i+1, 4, arrExportResult[i].ApprovedAmount);
						sheet.setCell(i+1, 5, arrExportResult[i].PaidAmount);
						
					}
					Grd_SpendHistory1.dataProvider = arrExportResult;
					xlsFile.sheets.addItem(sheet);      
					var bytes: ByteArray = xlsFile.saveToByteArray();
					var fr:FileReference = new FileReference();
					fr.save(bytes,"SampleExport.xls");
				}
				else
				{
					alignAlert(Alert.show("PettyCash Expense Details Required.","Message !",
						Alert.OK, null, null, iconErrLarge, Alert.OK),10,"");
				}
				Txt_User.text="";
				Txt_property.text="";
				Txt_CloseBalance.text="";
				Txt_OpenBalance.text="";
			
			}
			public function Ddl_Property_changeHandler():void
			{
				if(hlp_Property.selected())
				{
					PropertyName=hlp_Property.Select_Row.Property;
					PropertyId=hlp_Property.Select_Row.Id;
					hlp_Property.text=PropertyName;
					useWeb("PettyCashReport","USERLOAD_CUSTOM",[GlobalXml,'UserLoad',PropertyId,0,'','','']);
				}
				else
				{
					hlp_Property.text="";
				}
			}
			public function Ddl_User_changeHandler():void
			{
				if(hlp_User.selected())
				{
					UserName=hlp_User.Select_Row.UserName;
					UserId=hlp_User.Select_Row.Id;
					hlp_User.text=UserName;
				}
				else
				{
					hlp_User.text="";
				}
			}	
			protected function search():void
			{
				Grd_Details.dataProvider=null;
				ErrStr="";
				ErrMsg = ""; Flag = true; 
				//var Str:String=FnValidation_BeforeSave();
				if(ErrStr !="")
				{
					alignAlert(Alert.show(ErrStr,"Required Fields !",Alert.OK,this,null,iconErrLarge),10,"");
					return;
				} 
				var a:int = 0;
				var c:int = 0;
				{	
					a = dt_Date1.displayedMonth;
					c = dt_Date1.displayedYear;
				}			
				var b:int = 00;
				if(a == 0)
				{
					b = 01;
				}
				if(a != 0)
				{
					b = a + 01;
				}
				var MFromDate:String = '01'+'/'+String(b)+'/'+String(c);
				var Status:String=drp_status.selectedItem;
				if((PropertyId !=0)&&(UserId !=0))
				{
					if(Rbtn_First.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",PropertyId,UserId,"First",MFromDate,Status]);
					}
					else if(Rbtn_Second.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",PropertyId,UserId,"Second",MFromDate,Status]);
					}
					Grd_Details.visible=true;
				}
				else if((PropertyId !=0)&&(UserId ==0))
				{
					if(Rbtn_First.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",PropertyId,0,"First",MFromDate,Status]);
					}
					else if(Rbtn_Second.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",PropertyId,0,"Second",MFromDate,Status]);
					}
					Grd_Details.visible=true;
				}
				else if((PropertyId ==0)&&(UserId !=0))
				{
					if(Rbtn_First.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",0,UserId,"First",MFromDate,Status]);
					}
					else if(Rbtn_Second.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",0,UserId,"Second",MFromDate,Status]);
					}
					Grd_Details.visible=true;
				}
				else
				{
					if(Rbtn_First.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",0,0,"First",MFromDate,Status]);
					}
					else if(Rbtn_Second.selected==true)
					{
						useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",0,0,"Second",MFromDate,Status]);
					}
					Grd_Details.visible=true;
				}
				
			}
			public function Download():void
			{ 
				var BillId=Grd_SpendHistory.selectedItem.Id;
				useWeb("PettyCashReport","Download_CUSTOM",[GlobalXml,"DownloadReport",PropertyId,UserId,BillId,'','']);
			}
			private function init1():void 
			{
				// Initialize the array collection to an empty collection. 
				arrColl = new ArrayCollection();
				
				// Set up the URL request to download the file specified by the FILE_URL variable. 
				urlReq = new URLRequest(FILE_URL);
				txt_ImageName.text =FILE_URL;
				// Define file reference object and add a bunch of event listeners. 
				fileRef = new FileReference();
				fileRef.addEventListener(Event.CANCEL, doEvent);
				fileRef.addEventListener(Event.COMPLETE, doEvent);
				fileRef.addEventListener(Event.OPEN, doEvent);
				fileRef.addEventListener(Event.SELECT, doEvent);
				fileRef.addEventListener(HTTPStatusEvent.HTTP_STATUS, doEvent);
				fileRef.addEventListener(IOErrorEvent.IO_ERROR, doEvent);
				fileRef.addEventListener(ProgressEvent.PROGRESS, doEvent);
				fileRef.addEventListener(SecurityErrorEvent.SECURITY_ERROR, doEvent);
			}
			
			private function doEvent(evt:Event):void 
			{
				
				FilePath.text="";
			}
			
			private function downloadSourceCodeZip():void 
			{
			// Clear existing array collection. 
			//arrColl = new ArrayCollection();
			//Alert.show(FILE_URL);
			// Hide the Text control. //
			//txt.visible = false;
			// Begin download. 
			fileRef.download(urlReq);
			Brd_imageUpload.visible=false;
			}
			
			private function showAlert(item:Object):void 
			{
				Alert.show(item.eventString, item.type);
			}
			protected function close(event:MouseEvent):void
			{
				Brd_imageUpload.visible=false;
				bdr_SpendHistory.visible=true;
			}
			private function ViewBill():void 
			{
				ExternalInterface.call("changeDocumentTitle",txt_ImageName.text);
				Brd_imageUpload.visible=false;
			}
			public function roExport_export_Result2():void
			{
				if(Grd_Details.dataProvider !=null)
				{
					var arrExportResult:ArrayCollection = Grd_Details.dataProvider as ArrayCollection;
					xlsFile = new ExcelFile();
					var sheet:Sheet = new Sheet();
					
					sheet.resize(arrExportResult.length+1,8);
					
					sheet.setCell(0,0,'Submittedby');
					sheet.setCell(0,1,'SubmittedOn');
					sheet.setCell(0,2,'Month');
					sheet.setCell(0,3,'FortNight');
					sheet.setCell(0,4,'Amount');
					sheet.setCell(0,5,'Property');
					sheet.setCell(0,6,'LastProcessedOn');
					sheet.setCell(0,7,'LastProcessedBy');
					
					
					
					for(var i:int=0;i<arrExportResult.length;i++)
					{
						sheet.setCell(i+1, 0, arrExportResult[i].Submittedby);
						sheet.setCell(i+1, 1, arrExportResult[i].SubmittedOn);
						sheet.setCell(i+1, 2, arrExportResult[i].Month);
						sheet.setCell(i+1, 3, arrExportResult[i].FortNight);
						sheet.setCell(i+1, 4, arrExportResult[i].Amount);
						sheet.setCell(i+1, 5, arrExportResult[i].Property);
						sheet.setCell(i+1, 6, arrExportResult[i].LastProcessedOn);
						sheet.setCell(i+1, 7, arrExportResult[i].LastProcessedBy);
						
					}
					Grd_Details.dataProvider = arrExportResult;
					xlsFile.sheets.addItem(sheet);      
					var bytes: ByteArray = xlsFile.saveToByteArray();
					var fr:FileReference = new FileReference();
					fr.save(bytes,"Export.xls");
				}
				else
				{
					alignAlert(Alert.show("Action Details Required.","Message !",
						Alert.OK, null, null, iconTickLarge, Alert.OK),10,"");
				}
				
			}
			protected function Clear():void
			{
				hlp_Property.dataProvider=null;
				hlp_Property.text="";PropertyId=0;Id=0;
				UserId=0;
				hlp_User.text="";
				Rbtn_First.selected=true;
				Help();Txt_OpenBalance.text="";Txt_CloseBalance.text="";
				dt_Date1.selectedDate=new Date();
				drp_status.selectedItem="Select a Status";
			}
			
		]]>
	</fx:Script>
	<s:VGroup x="0" y="0" width="100%" height="100%" horizontalAlign="center" verticalAlign="middle">
		<s:BorderContainer x="12" y="1" width="100%" height="522" backgroundColor="#fbf9f9"
						   borderVisible="false">
			<s:Label x="43" y="49" text="Property"/>
			<s:Label x="43" y="89" text="Status"/>
			<s:DropDownList x="95" y="79" width="261" height="24" id="drp_status"
							selectedItem="Select a Status">
				<s:ArrayList>
					<fx:String>Select a Status</fx:String>
					<fx:String>Submitted</fx:String>
					<fx:String>Approved by reporting authority</fx:String>
					<fx:String>Report Approved by Ops Head</fx:String>
					<fx:String>Accounted and Closed by Finance Manager</fx:String>
					
				</s:ArrayList>
			</s:DropDownList>
			<WrbHelpComp:HelpText id="hlp_Property" x="96" y="43" width="261" height="22" pxSetColumnsWidth="0,218" 
								  onselection="{Ddl_Property_changeHandler()}"  pxTabIndex="1" depth="10">
			</WrbHelpComp:HelpText>
			<mx:DateChooser id="dt_Date1" visible="true" x="383" y="78" height="31"
							focusEnabled="false" selectedDate="{new Date()}" 
							yearNavigationEnabled="true" selectableRange="{{rangeEnd: new Date()}}" />
			<s:BorderContainer x="384" y="111" width="183" height="21" backgroundColor="#fbf9f9"
							   borderVisible="false" depth="4">
				</s:BorderContainer>
				
			
			<s:BorderContainer id="brd_Rbtn_Deposite" x="605" y="87" width="230" height="34" 
							   borderVisible="false" visible="true" >
				<s:RadioButton id="Rbtn_First" x="8" y="0" label="First Fortnight" />
				<s:RadioButton id="Rbtn_Second" x="109" y="0" label="Second Fortnight"/>
			</s:BorderContainer>
			<mx:Label x="83" y="9" text="Petty Cash Expense Report" color="red"/>
			<mx:DataGrid x="3" y="138"  verticalAlign="middle" editable="true" visible="true"
						 width="975" height="344" tabIndex="4" id="Grd_Details" >
				<mx:columns>
					<mx:DataGridColumn dataField="DetailView" headerText="StatusDetail" width="75" editable="false"
									   visible="true">
						<mx:itemRenderer >
							<fx:Component>
								<mx:HBox horizontalAlign="center" verticalAlign="middle">										
									<mx:Image source="@Embed(source='../Assets/view.gif')" buttonMode="true"
											  click="outerDocument.Details(event)"  />
								</mx:HBox>	
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					<mx:DataGridColumn dataField="Submittedby" headerText="Submittedby" width="100" editable="false"
									   textAlign="center"/>
					<mx:DataGridColumn dataField="SubmittedOn" headerText="SubmittedOn" width="100" editable="false"/>
					<mx:DataGridColumn dataField="Month" headerText="Month" width="50" editable="false" />
					<mx:DataGridColumn dataField="FortNight" headerText="FortNight" width="75" editable="false" />
					<mx:DataGridColumn dataField="Amount" headerText="Amount" width="75" 
									   textAlign="center" editable="false"/>
					<mx:DataGridColumn dataField="Property" headerText="Property" width="100" editable="false" />
					<mx:DataGridColumn dataField="LastProcessedOn" headerText="LastProcessedOn" width="100" editable="false" />
					<mx:DataGridColumn dataField="LastProcessedBy" headerText="LastProcessedBy" width="100" editable="false" />
					<mx:DataGridColumn dataField="PropertyId" headerText="PropertyId" width="10" editable="false" visible="false"/>
					<mx:DataGridColumn dataField="UserId" headerText="UserId" width="10" editable="false" visible="false" />
					<mx:DataGridColumn dataField="DetailView" headerText="DetailView" width="75" editable="false"
									   visible="true">
						<mx:itemRenderer >
							<fx:Component>
								<mx:HBox horizontalAlign="center" verticalAlign="middle">										
									<mx:Image source="@Embed(source='../Assets/view.gif')" buttonMode="true"
											  click="outerDocument.Spend(event)" />
								</mx:HBox>	
							</fx:Component>
						</mx:itemRenderer>
					</mx:DataGridColumn>
					
					
				</mx:columns>
			</mx:DataGrid>
			<WrbComp:Button_BB x="454" y="486" Lable_val="Export" click="roExport_export_Result2()">
			</WrbComp:Button_BB>
			<WrbComp:Button_BB x="554" y="486" Lable_val="Clear" click="Clear()">
			</WrbComp:Button_BB>
			<s:BorderContainer x="203" y="109" width="587" height="344" id="bdr_History"
							   borderVisible="true" visible="false" depth="1500">
				<s:BorderContainer x="0" y="0" width="586" height="42" borderVisible="true"  backgroundColor="#c2c2c2">
					<s:Image x="559" y="13" source="@Embed(source='../Assets/CrossSmall.png')" 
							 buttonMode="true" toolTip="Close" click="FnClosetariff_clickHandler(event)"/>
					<mx:Label x="45" y="12" text="Approval Status" color="red"/>
				</s:BorderContainer>
				<mx:DataGrid x="46" y="46"  verticalAlign="middle" editable="true" visible="true"
							 width="510" height="286" tabIndex="4" id="Grd_History" >
					<mx:columns>
						<mx:DataGridColumn dataField="UserName" headerText="UserName" width="100" editable="false"
										   visible="true">
						</mx:DataGridColumn>
						<mx:DataGridColumn dataField="Status" headerText="Status" width="150" 
										   editable="false" visible="true">
						</mx:DataGridColumn>
						<mx:DataGridColumn dataField="Comments" headerText="Comments" width="150" editable="false">
						</mx:DataGridColumn>
						<mx:DataGridColumn dataField="Processedon" headerText="Processedon" width="100" editable="false">
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid>
							
			</s:BorderContainer>
			<s:BorderContainer x="63" y="89" width="850" height="427" id="bdr_SpendHistory"
							   borderVisible="true" visible="false" depth="1500">
				<s:BorderContainer x="0" y="0" width="848" height="42" borderVisible="true"  backgroundColor="#c2c2c2">
					<s:Image x="819" y="13" source="@Embed(source='../Assets/CrossSmall.png')" 
							 buttonMode="true" toolTip="Close" click="FnClosetariff_clickHandler1(event)"/>
					<mx:Label x="35" y="12" text="PettyCash Spend History" color="red"/>
				</s:BorderContainer>
				<mx:Label x="99" y="399" text="Resident Manager" />
				<mx:Label x="250" y="399" text="Operations Manager" />
				<mx:Label x="430" y="399" text="Head Operations" />
				<mx:Label x="590" y="399" text="Account Manager" />
				<mx:DataGrid x="44" y="101"  verticalAlign="middle" editable="true" visible="true"
							 width="770" height="227" tabIndex="4" id="Grd_SpendHistory" >
					<mx:columns>
						<mx:DataGridColumn dataField="Id" headerText="Id" width="10" editable="false" visible="false"/>
						<mx:DataGridColumn dataField="SNo" headerText="S.No" width="40" editable="false" visible="true"/>
						<mx:DataGridColumn dataField="Date" headerText="Date" width="80" editable="false" visible="true"/>
						<mx:DataGridColumn dataField="ExpenseHead" headerText="ExpenseHead" width="100" editable="false"/>
						<mx:DataGridColumn dataField="Description" headerText="Description" width="100" editable="false"/>
						<mx:DataGridColumn dataField="ApprovedAmount" headerText="Approved Amount" width="100" editable="false"/>
						<mx:DataGridColumn dataField="PaidAmount" headerText="Paid Amount" width="100" editable="false"/>
						<mx:DataGridColumn dataField="Bill" headerText="Bill" width="80" editable="false">
							<mx:itemRenderer >
								<fx:Component>
									<mx:HBox horizontalAlign="center" verticalAlign="middle">										
										<mx:Image source="@Embed(source='../Assets/view.gif')" buttonMode="true"
												  click="outerDocument.Download()" />
									</mx:HBox>	
								</fx:Component>
							</mx:itemRenderer>
						</mx:DataGridColumn>
					</mx:columns>
				</mx:DataGrid> 
				<mx:DataGrid x="44" y="101"  verticalAlign="middle" editable="true" visible="false"
							 width="770" height="227" tabIndex="4" id="Grd_SpendHistory1" >
					<mx:columns>
						<mx:DataGridColumn dataField="SNo" headerText="SNo" width="40" editable="false" visible="true"/>
						<mx:DataGridColumn dataField="Date" headerText="Date" width="80" editable="false" visible="true"/>
						<mx:DataGridColumn dataField="ExpenseHead" headerText="ExpenseHead" width="100" editable="false"/>
						<mx:DataGridColumn dataField="Description" headerText="Description" width="100" editable="false"/>
						<mx:DataGridColumn dataField="ApprovedAmount" headerText="ApprovedAmount" width="100" editable="false"/>
						<mx:DataGridColumn dataField="PaidAmount" headerText="PaidAmount" width="100" editable="false"/>
						<mx:DataGridColumn dataField="Bill" headerText="Bill" width="80" editable="false"/>
					</mx:columns>
				</mx:DataGrid>
				<WrbComp:Button_BB x="728" y="389" Lable_val="Export" click="roExport_export_Result(event)">
				</WrbComp:Button_BB>
				<s:BorderContainer x="213" y="45" width="437" height="237" id="Brd_imageUpload" visible="false" 
								   borderVisible="true" backgroundColor="#fbf9f9" cornerRadius="5" depth="2500">
					
						<mx:ControlBar visible="false">
							<mx:Spacer width="80%"/>
							<mx:HBox visible="false">
								<mx:TextInput id="FilePath" width="150"  visible="true"/>
								<mx:Button id="Filedata" label="Browse File" name="Filedata" />
								<mx:Button label="UpLoad File" name="uploadbutton" id="uploadbutton" visible="false" width="0" />
							</mx:HBox>
							<mx:TextArea id="resultsTxtField"  width="0"  name="resultsTxtField" visible="false"/>
						</mx:ControlBar>
					
					<WrbComp:Button_HB id="Btn_Close" x="65" y="145" width="118" height="32" buttonMode="true"
									   _Label="Download" click="downloadSourceCodeZip()" depth="0" focusEnabled="false" visible="true"/>
					
					<s:TextInput x="111" y="52" width="189" height="40" id="txt_ImageName" enabled="false"/>		
					
					<WrbComp:Button_HB x="189" y="145" height="32" _Label="View" click="ViewBill()"/>
					<WrbComp:Button_HB x="279" y="145" height="32" _Label="Close" click="{Brd_imageUpload.visible=false}"/>
					
				</s:BorderContainer>				
				<mx:Label x="46" y="68" text="UserName" id="lbl_user"/>
				<mx:TextInput x="126" y="66" id="Txt_User" editable="false"/>
				<mx:Label x="307" y="67" text="Property" id="lbl_property"/>
				<mx:TextInput x="369" y="65" id="Txt_property" editable="false"/>
				<mx:Label x="557" y="67" text="OpeningBalance" id="lbl_CloseBalance"/>
				<mx:TextInput x="659" y="65" id="Txt_OpenBalance" editable="false"/>
				<mx:Label x="551" y="363" text="ClosingBalance" id="lbl_CloseBalance0"/>
				<mx:Label id="lbl_Amount" x="482" y="333" width="101" text=""/>
				<mx:Label id="lbl_Paid" x="618" y="333" width="91" text=""/>
				<mx:Label x="257" y="333" text="Total Amount and OPeningBalance" />
				<mx:TextInput x="653" y="361" id="Txt_CloseBalance" editable="false"/>
			</s:BorderContainer>
			<!--s:Button x="525" y="480" width="58" label="Print" click="doPrint()" visible="false"/-->
			<WrbComp:Button_BB x="745" y="39" height="23" click="search()" Lable_val="Filter">
			</WrbComp:Button_BB>
			<s:Label x="389" y="48" text="RequestedBy"/>
			<WrbHelpComp:HelpText id="hlp_User" x="470" y="41" width="261" height="22" pxSetColumnsWidth="0,218" 
								  onselection="{Ddl_User_changeHandler()}"  pxTabIndex="1" depth="10">
			</WrbHelpComp:HelpText>
		</s:BorderContainer>
		
	</s:VGroup>
</s:Application>
