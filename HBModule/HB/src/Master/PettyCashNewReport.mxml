<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009"
			   xmlns:s="library://ns.adobe.com/flex/spark"
			   xmlns:mx="library://ns.adobe.com/flex/mx"
			   xmlns:Controls="fx.com.adobe.Controls.*"
			   xmlns:WrbHelpComp="WrbHelpComp.*"
			   xmlns:WrbComp="WrbComp.*"
			   xmlns:ns1="*"
			   width="100%" height="100%" creationComplete="PageLoad(event)"
			   pageTitle="Petty Cash Report">
	<fx:Declarations>
		<!-- Place non-visual elements (e.g., services, value objects) here -->
	</fx:Declarations>
	
	<fx:Script source = "..\\Common\\CommonScript.as"/>
	<fx:Script source = "..\\Common\\Functions.as"/>
	<fx:Style source="..\\Common\\ApplicationCSS.css"/>
	<fx:Script>
		<![CDATA[
			import WrbComp.FormPrintView;
			import WrbComp.frmsearchwindow;
			
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			import com.as3xls.xls.Type;
			
			import mx.collections.ArrayCollection;
			import mx.containers.Accordion;
			import mx.controls.Alert;
			import mx.controls.Text;
			import mx.events.CalendarLayoutChangeEvent;
			import mx.events.CloseEvent;
			import mx.events.ColorPickerEvent;
			import mx.events.FlexEvent;
			import mx.events.IndexChangedEvent;
			import mx.events.ListEvent;
			import mx.graphics.codec.PNGEncoder;
			import mx.managers.PopUpManager;
			import mx.printing.*;
			import mx.rpc.http.mxml.HTTPService;
			
			import spark.events.IndexChangeEvent;
			import spark.events.TextOperationEvent;
			import spark.layouts.ColumnAlign;
			private var SearchPopUp:frmsearchwindow = new frmsearchwindow();
			public static var Global_AC:ArrayCollection = new ArrayCollection();
			public static var GlobalXml:String = "",TypeServiceId:int=0,ErrStr:String="";
			public var Id:int=0,ErrMsg:String="",PropertyId:int=0,PropertyName:String="",UserId:int=0;
			public var AddMode:Boolean=true,Flag:Boolean=true,UserName:String="";
			public var FromDate:String="",ToDate:String="";
			[Bindable]
			public var footerHeight:Number = 20;
			public var prodIndex:Number;
			public var prodTotal:Number = 0;
			private var xlsFile:ExcelFile;
			protected function PageLoad(event:FlexEvent):void
			{
				Global_AC=funLoginInfo("<FlexServiceUrl>http://192.168.1.135/WebService/clsDataInterface.asmx?WSDL</FlexServiceUrl><FlexSwfUrl>http://192.168.1.135/wrperp/</FlexSwfUrl><gVchTypCd>PO</gVchTypCd><gVchTypDesc>Purchase Order</gVchTypDesc><gVchTypFk>387</gVchTypFk><gLocFk>1</gLocFk><gUmpFk></gUmpFk><gFyrFk>2</gFyrFk><gUsr>ADMIN</gUsr><gUsrFk>4</gUsrFk><gCur>Indian Rupees</gCur><gCurFk>1</gCurFk><gCurRt> 1.0000000</gCurRt><gPrintPath></gPrintPath><gScrId>551</gScrId><gCPRights>10101111</gCPRights>")
				GlobalXml="";
				GlobalXml += "<ROOT>";
				GlobalXml += ObjToXmlStr_Comm(Global_AC,"GlobalXml")
				GlobalXml += "</ROOT>";
				Help();	
			}
			public function Help():void
			{
				useWeb("PettyCashReport","PAGELOAD_CUSTOM",[GlobalXml,'PAGELOAD',0,Global_AC[0].UsrId,'','']);//32]);
			}
			private function Custom_WebSer_Result (Ds_Objects:Object):void
			{
				if (Ds_Objects.currentTarget.description.toString() == "PAGELOAD_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						hlp_property.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;		
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "USERLOAD_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						hlp_User.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;		
					}
				}
				if (Ds_Objects.currentTarget.description.toString() == "HistoryLoad_CUSTOM")
				{
					if (Ds_Objects.result.Tables.Table.Rows.length > 0)
					{
						Grd_History.dataProvider=Ds_Objects.result.Tables.Table.Rows as ArrayCollection;
					}
				}
			}
			
			protected function PropertyLoad():void
			{
				if(hlp_property.selected())
				{
					hlp_User.text="";
					UserId=0;
					Grd_History.dataProvider=null;
					PropertyId=hlp_property.Select_Row.Id;
					PropertyName=hlp_property.Select_Row.Property;
					hlp_property.text=PropertyName;
					useWeb("PettyCashReport","USERLOAD_CUSTOM",[GlobalXml,"USERLOAD",PropertyId,0,'','']);
					hlp_User.setFocus();
				}
				else
				{
					hlp_property.text="";
				}
			}
			protected function GuestNameLoad():void
			{
				if(hlp_User.selected())
				{
					UserId=hlp_User.Select_Row.Id;
					UserName=hlp_User.Select_Row.UserName;
					hlp_User.text=UserName;
					//useWeb("PettyCashReport","Gridload_CUSTOM",[GlobalXml,"GRIDLOAD",PropertyId,UserId]);
					dt_DateFrom.setFocus();
				}
				else
				{
					hlp_User.text="";
				}
			}
			public function FnClosetariff_clickHandler(event):void
			{
				Grd_History.dataProvider=null;
			}
//			public function doPrint():void {
//				// Create a FlexPrintJob instance.
//				var printJob:FlexPrintJob = new FlexPrintJob();
//				
//				// Start the print job.
//				if (printJob.start()) {
//					// Create a FormPrintView control 
//					// as a child of the application.
//					var thePrintView:FormPrintView = new FormPrintView();
//					addElement(thePrintView);
//					
//					// Set the print view properties.
//					thePrintView.width=printJob.pageWidth;
//					thePrintView.height=printJob.pageHeight;
//					thePrintView.prodTotal = prodTotal;
//					
//					// Set the data provider of the FormPrintView 
//					// component's DataGrid to be the data provider of 
//					// the displayed DataGrid.
//					thePrintView.myDataGrid.dataProvider = 
//						Grd_History.dataProvider;
//					
//					// Create a single-page image.
//					thePrintView.showPage("single");
//					
//					// If the print image's DataGrid can hold all the  
//					// data provider's rows, add the page to the print job. 
//					if(!thePrintView.myDataGrid.validNextPage)
//					{
//						printJob.addObject(thePrintView);
//					}
//						// Otherwise, the job requires multiple pages.
//					else
//					{
//						// Create the first page and add it to the print job.
//						thePrintView.showPage("first");
//						printJob.addObject(thePrintView);
//						thePrintView.pageNumber++;
//						
//						// Loop through the following code 
//						// until all pages are queued.
//						while(true)
//						{
//							// Move the next page of data to the top of 
//							// the PrintDataGrid.
//							thePrintView.myDataGrid.nextPage();
//							
//							// Try creating a last page.
//							thePrintView.showPage("last");  
//							
//							// If the page holds the remaining data, or if 
//							// the last page was completely filled by the last  
//							// grid data, queue it for printing.
//							// Test if there is data for another 
//							// PrintDataGrid page.
//							if(!thePrintView.myDataGrid.validNextPage) 
//							{
//								// This is the last page; 
//								// queue it and exit the print loop.
//								printJob.addObject(thePrintView);
//								break;
//							}
//							else
//								// This is not the last page. Queue a middle page. 
//							{
//								thePrintView.showPage("middle");
//								printJob.addObject(thePrintView);
//								thePrintView.pageNumber++;
//							}
//						}
//					}
//					// All pages are queued; remove the FormPrintView 
//					// control to free memory.
//					removeElement(thePrintView);
//				}
//				// Send the job to the printer.
//				printJob.send();
//				Grd_History.visible=false;
//				PropertyId=0;
//				UserId=0;
//				hlp_property.text="";
//				hlp_User.text="";
//			}
			
			public var bytes:ByteArray = new ByteArray();
		
			public function roExport_export_Result1():void
			{
				if(Grd_History.dataProvider !=null)
				{
					var arrExportResult:ArrayCollection = Grd_History.dataProvider as ArrayCollection;
					xlsFile = new ExcelFile();
					var sheet:Sheet = new Sheet();
					
					sheet.resize(arrExportResult.length+1,5);
					
					sheet.setCell(0,0,'S.No');		
					sheet.setCell(0,1,'Submittedby');
					sheet.setCell(0,2,'RequestedOn');
					sheet.setCell(0,3,'ExpenseHead');
					sheet.setCell(0,4,'Description');
					sheet.setCell(0,5,'Amount');
					
					for(var i:int=0;i<arrExportResult.length;i++)
					{
						sheet.setCell(i+1, 0, arrExportResult[i].SerialNo);
						sheet.setCell(i+1, 1, arrExportResult[i].Requestedby);
						sheet.setCell(i+1, 2, arrExportResult[i].RequestedOn);
						sheet.setCell(i+1, 3, arrExportResult[i].ExpenseHead);
						sheet.setCell(i+1, 4, arrExportResult[i].Description);
						sheet.setCell(i+1, 5, arrExportResult[i].Amount);
						
					}
					Grd_History.dataProvider = arrExportResult;
					xlsFile.sheets.addItem(sheet);
					var bytes: ByteArray = xlsFile.saveToByteArray();
					var fr:FileReference = new FileReference();
					fr.save(bytes,"SampleExport.xls");
				}
				else
				{
					alignAlert(Alert.show("User Requested Details Required.","Message !",
						Alert.OK, null, null, iconErrLarge, Alert.OK),10,"");
				}
				Grd_History.dataProvider=null;
				PropertyId=0;
				UserId=0;
				hlp_property.text="";
				hlp_User.text="";
			}
			protected function FnValidation_BeforeSave():String
			{
				ErrStr="";
				
				var TxtFlag:Boolean=true;
				if(hlp_property.text =="")
				{
					ErrStr=ErrStr+"* PropertyName Required.\n";
				}
				if(hlp_User.text =="")
				{
					ErrStr=ErrStr+"* UserName Required.\n";
				}
				return ErrStr;
			}
			protected function search(event:MouseEvent):void
			{
				ErrStr="";
				ErrMsg = ""; Flag = true; 
				var Str:String=FnValidation_BeforeSave();
				if(ErrStr !="")
				{
					alignAlert(Alert.show(ErrStr,"Required Fields !",Alert.OK,this,null,iconErrLarge),10,"");
					return;
				} 
				FromDate=dt_DateFrom.text;
				ToDate=dt_DateTo.text;
				//var MFromDate:String = String(b)+'/'+'01/'+String(c);
				useWeb("PettyCashReport","HistoryLoad_CUSTOM",[GlobalXml,"PCNewReport",PropertyId,UserId,FromDate,ToDate]);
				Grd_History.visible=true;
				
			}
			
		]]>
	</fx:Script>
	
		<s:BorderContainer x="12" y="19" width="100%" height="500" backgroundColor="#fbf9f9"
						   borderVisible="false">
			
			<WrbHelpComp:HelpText id="hlp_property" x="148" y="58" width="180" height="25" depth="10"
								  onselection="{PropertyLoad()}" pxSetColumnsWidth="0,200" tabIndex="1"
								  pxSetHeight="183">
			</WrbHelpComp:HelpText>
			<WrbHelpComp:HelpText id="hlp_User" x="405" y="58" width="152" height="25" depth="10" tabIndex="2"
								  onselection="{GuestNameLoad()}" pxSetColumnsWidth="0,152">
			</WrbHelpComp:HelpText>
			<s:BorderContainer x="637" y="90" width="183" height="25" backgroundColor="#fbf9f9"
							   borderVisible="false">
				
			</s:BorderContainer>
			
			<mx:Label x="563" y="60" text="From"/>
			<mx:DateField id="dt_DateFrom" x="601" y="58" width="100" height="23" enabled="true"
						  formatString="DD/MM/YYYY" selectableRange="{{rangeEnd:new Date()}}"
						  styleName="DisabledDateField" tabIndex="3"
						  yearNavigationEnabled="false"/>
			<s:Label x="711" y="64" text="To"/>
			<mx:DateField id="dt_DateTo" x="733" y="58" width="100" height="23" enabled="true"
						  formatString="DD/MM/YYYY" selectableRange="{{rangeEnd:new Date()}}"
						  styleName="DisabledDateField" tabIndex="4"
						  yearNavigationEnabled="false"/>
			<mx:Label x="93" y="60" text="Property"/>
			<mx:Label x="337" y="60" text="UserName"/>
			<mx:Label x="93" y="29" text="Petty Cash Report" color="red"/>
			
			<mx:DataGrid x="91" y="117"  verticalAlign="middle" editable="true" visible="true"
							 width="836" height="338" tabIndex="4" id="Grd_History" >
					<mx:columns>
						<mx:DataGridColumn dataField="SerialNo" headerText="SerialNo" width="100" editable="false"/>
						<mx:DataGridColumn dataField="Requestedby" headerText="Submittedby" width="100" editable="false"/>
						<mx:DataGridColumn dataField="RequestedOn" headerText="RequestedOn" width="100" editable="false"/>
						<mx:DataGridColumn dataField="ExpenseHead" headerText="ExpenseHead" width="200" editable="false"
										   textAlign="left"/>
						<mx:DataGridColumn dataField="Description" headerText="Description" width="236" editable="false"
										   textAlign="left"/>
						<mx:DataGridColumn dataField="Amount" headerText="Amount" width="100" editable="false" textAlign="right"/>
					</mx:columns>
					
				</mx:DataGrid> 
				<WrbComp:Button_BB x="468" y="463" Lable_val="Export" click="roExport_export_Result1()">
				</WrbComp:Button_BB>
				
			
			<WrbComp:Button_BB x="843" y="58" height="23" click="search(event)" Lable_val="Filter">
			</WrbComp:Button_BB>
		
	</s:BorderContainer>
</s:Application>
