//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace test1
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HBEntities : DbContext
    {
        public HBEntities()
            : base("name=HBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ClientManagementHelp> ClientManagementHelps { get; set; }
        public virtual DbSet<FAdmin> FAdmins { get; set; }
        public virtual DbSet<FClientLogo> FClientLogoes { get; set; }
        public virtual DbSet<FInformation> FInformations { get; set; }
        public virtual DbSet<Mail> Mails { get; set; }
        public virtual DbSet<Paswword> Paswwords { get; set; }
        public virtual DbSet<RolesRight> RolesRights { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
        public virtual DbSet<TrRequest> TrRequests { get; set; }
        public virtual DbSet<webpages_Membership> webpages_Membership { get; set; }
        public virtual DbSet<webpages_OAuthMembership> webpages_OAuthMembership { get; set; }
        public virtual DbSet<webpages_Roles> webpages_Roles { get; set; }
        public virtual DbSet<WRBHBAdjustmentCategory> WRBHBAdjustmentCategories { get; set; }
        public virtual DbSet<WRBHBApartmentBookingProperty> WRBHBApartmentBookingProperties { get; set; }
        public virtual DbSet<WRBHBApartmentBookingPropertyAssingedGuest> WRBHBApartmentBookingPropertyAssingedGuests { get; set; }
        public virtual DbSet<WRBHBAPICityCode> WRBHBAPICityCodes { get; set; }
        public virtual DbSet<WRBHBAPIHeader> WRBHBAPIHeaders { get; set; }
        public virtual DbSet<WRBHBAPIHeader_FrontEnd> WRBHBAPIHeader_FrontEnd { get; set; }
        public virtual DbSet<WRBHBAPIHotelHeader> WRBHBAPIHotelHeaders { get; set; }
        public virtual DbSet<WRBHBAPIHotelHeader_FrontEnd> WRBHBAPIHotelHeader_FrontEnd { get; set; }
        public virtual DbSet<WRBHBAPIRateMealPlanInclusionDtl> WRBHBAPIRateMealPlanInclusionDtls { get; set; }
        public virtual DbSet<WRBHBAPIRateMealPlanInclusionDtls_FrontEnd> WRBHBAPIRateMealPlanInclusionDtls_FrontEnd { get; set; }
        public virtual DbSet<WRBHBAPIRoomRateDtl> WRBHBAPIRoomRateDtls { get; set; }
        public virtual DbSet<WRBHBAPIRoomRateDtls_FrontEnd> WRBHBAPIRoomRateDtls_FrontEnd { get; set; }
        public virtual DbSet<WRBHBAPIRoomTypeDtl> WRBHBAPIRoomTypeDtls { get; set; }
        public virtual DbSet<WRBHBAPIRoomTypeDtls_FrontEnd> WRBHBAPIRoomTypeDtls_FrontEnd { get; set; }
        public virtual DbSet<WRBHBAPITariffDtl> WRBHBAPITariffDtls { get; set; }
        public virtual DbSet<WRBHBAPITariffDtls_FrontEnd> WRBHBAPITariffDtls_FrontEnd { get; set; }
        public virtual DbSet<WRBHBBankAccount> WRBHBBankAccounts { get; set; }
        public virtual DbSet<WRBHBBankTransaction> WRBHBBankTransactions { get; set; }
        public virtual DbSet<WRBHBBedBookingProperty> WRBHBBedBookingProperties { get; set; }
        public virtual DbSet<WRBHBBedBookingPropertyAssingedGuest> WRBHBBedBookingPropertyAssingedGuests { get; set; }
        public virtual DbSet<WRBHBBooking> WRBHBBookings { get; set; }
        public virtual DbSet<WRBHBBookingAdvanceAmountPaid> WRBHBBookingAdvanceAmountPaids { get; set; }
        public virtual DbSet<WRBHBBookingCustomFieldsDetail> WRBHBBookingCustomFieldsDetails { get; set; }
        public virtual DbSet<WRBHBBookingGuestDetail> WRBHBBookingGuestDetails { get; set; }
        public virtual DbSet<WRBHBBookingProperty> WRBHBBookingProperties { get; set; }
        public virtual DbSet<WRBHBBookingPropertyAssingedGuest> WRBHBBookingPropertyAssingedGuests { get; set; }
        public virtual DbSet<WRBHBBookingPropertyAssingedGuest_FrontEnd> WRBHBBookingPropertyAssingedGuest_FrontEnd { get; set; }
        public virtual DbSet<WRBHBBookingTrackingPayment> WRBHBBookingTrackingPayments { get; set; }
        public virtual DbSet<WRBHBBTCSubmission> WRBHBBTCSubmissions { get; set; }
        public virtual DbSet<WRBHBBTCSubmissionCard> WRBHBBTCSubmissionCards { get; set; }
        public virtual DbSet<WRBHBBTCSubmissionCash> WRBHBBTCSubmissionCashes { get; set; }
        public virtual DbSet<WRBHBBTCSubmissionCheque> WRBHBBTCSubmissionCheques { get; set; }
        public virtual DbSet<WRBHBBTCSubmissionDetail> WRBHBBTCSubmissionDetails { get; set; }
        public virtual DbSet<WRBHBBTCSubmissionNEFT> WRBHBBTCSubmissionNEFTs { get; set; }
        public virtual DbSet<WRBHBChechkOutHdr> WRBHBChechkOutHdrs { get; set; }
        public virtual DbSet<WRBHBChechkOutPaymentCard> WRBHBChechkOutPaymentCards { get; set; }
        public virtual DbSet<WRBHBChechkOutPaymentCash> WRBHBChechkOutPaymentCashes { get; set; }
        public virtual DbSet<WRBHBChechkOutPaymentCheque> WRBHBChechkOutPaymentCheques { get; set; }
        public virtual DbSet<WRBHBChechkOutPaymentCompanyInvoice> WRBHBChechkOutPaymentCompanyInvoices { get; set; }
        public virtual DbSet<WRBHBChechkOutPaymentNEFT> WRBHBChechkOutPaymentNEFTs { get; set; }
        public virtual DbSet<WRBHBCheckInHdr> WRBHBCheckInHdrs { get; set; }
        public virtual DbSet<WRBHBCheckOutServiceDtl> WRBHBCheckOutServiceDtls { get; set; }
        public virtual DbSet<WRBHBCheckOutServiceHdr> WRBHBCheckOutServiceHdrs { get; set; }
        public virtual DbSet<WRBHBCheckOutSettleDtl> WRBHBCheckOutSettleDtls { get; set; }
        public virtual DbSet<WRBHBCheckOutSettleHdr> WRBHBCheckOutSettleHdrs { get; set; }
        public virtual DbSet<WRBHBCity> WRBHBCities { get; set; }
        public virtual DbSet<WRBHBClientColumn> WRBHBClientColumns { get; set; }
        public virtual DbSet<WRBHBClientContactType> WRBHBClientContactTypes { get; set; }
        public virtual DbSet<WRBHBClientGrade> WRBHBClientGrades { get; set; }
        public virtual DbSet<WRBHBClientGradeValue> WRBHBClientGradeValues { get; set; }
        public virtual DbSet<WRBHBClientGradeValueDetail> WRBHBClientGradeValueDetails { get; set; }
        public virtual DbSet<WRBHBClientManagement> WRBHBClientManagements { get; set; }
        public virtual DbSet<WRBHBClientManagementAddNewClient> WRBHBClientManagementAddNewClients { get; set; }
        public virtual DbSet<WRBHBClientManagementCustomField> WRBHBClientManagementCustomFields { get; set; }
        public virtual DbSet<WRBHBClientSMTP> WRBHBClientSMTPs { get; set; }
        public virtual DbSet<WRBHBClientwisePricingModel> WRBHBClientwisePricingModels { get; set; }
        public virtual DbSet<WRBHBCompanyMaster> WRBHBCompanyMasters { get; set; }
        public virtual DbSet<WRBHBContarctProductMaster> WRBHBContarctProductMasters { get; set; }
        public virtual DbSet<WRBHBContractClientPref_Details> WRBHBContractClientPref_Details { get; set; }
        public virtual DbSet<WRBHBContractClientPref_Header> WRBHBContractClientPref_Header { get; set; }
        public virtual DbSet<WRBHBContractManagement> WRBHBContractManagements { get; set; }
        public virtual DbSet<WRBHBContractManagementAppartment> WRBHBContractManagementAppartments { get; set; }
        public virtual DbSet<WRBHBContractManagementService> WRBHBContractManagementServices { get; set; }
        public virtual DbSet<WRBHBContractManagementTariffAppartment> WRBHBContractManagementTariffAppartments { get; set; }
        public virtual DbSet<WRBHBContractNonDedicated> WRBHBContractNonDedicateds { get; set; }
        public virtual DbSet<WRBHBContractNonDedicatedApartment> WRBHBContractNonDedicatedApartments { get; set; }
        public virtual DbSet<WRBHBContractNonDedicatedService> WRBHBContractNonDedicatedServices { get; set; }
        public virtual DbSet<WRBHBDeposit> WRBHBDeposits { get; set; }
        public virtual DbSet<WRBHBDepositsDlt> WRBHBDepositsDlts { get; set; }
        public virtual DbSet<WRBHBExpenseGroup> WRBHBExpenseGroups { get; set; }
        public virtual DbSet<WRBHBExpenseHead> WRBHBExpenseHeads { get; set; }
        public virtual DbSet<WRBHBExternal_Users> WRBHBExternal_Users { get; set; }
        public virtual DbSet<WRBHBExternalChechkOutTAC> WRBHBExternalChechkOutTACs { get; set; }
        public virtual DbSet<WRBHBFeedBckForm> WRBHBFeedBckForms { get; set; }
        public virtual DbSet<WRBHBFinancialYear> WRBHBFinancialYears { get; set; }
        public virtual DbSet<WRBHBGradeMaster> WRBHBGradeMasters { get; set; }
        public virtual DbSet<WRBHBImportGuest> WRBHBImportGuests { get; set; }
        public virtual DbSet<WRBHBInternal_Users> WRBHBInternal_Users { get; set; }
        public virtual DbSet<WRBHBInvoiceExternalAmount> WRBHBInvoiceExternalAmounts { get; set; }
        public virtual DbSet<WRBHBInvoiceExternalAmountMonthGenerated> WRBHBInvoiceExternalAmountMonthGenerateds { get; set; }
        public virtual DbSet<WRBHBInvoiceMaintenanceAmount> WRBHBInvoiceMaintenanceAmounts { get; set; }
        public virtual DbSet<WRBHBInvoiceManagedGHAmount> WRBHBInvoiceManagedGHAmounts { get; set; }
        public virtual DbSet<WRBHBInvoiceManagedGHAmountMonthGenerated> WRBHBInvoiceManagedGHAmountMonthGenerateds { get; set; }
        public virtual DbSet<WRBHBInvoiceRentAmount> WRBHBInvoiceRentAmounts { get; set; }
        public virtual DbSet<WRBHBInvoiceRentMonthGeneratedMaintenance> WRBHBInvoiceRentMonthGeneratedMaintenances { get; set; }
        public virtual DbSet<WRBHBInvoiceRentMonthGeneratedRent> WRBHBInvoiceRentMonthGeneratedRents { get; set; }
        public virtual DbSet<WRBHBKOTDtl> WRBHBKOTDtls { get; set; }
        public virtual DbSet<WRBHBKOTHdr> WRBHBKOTHdrs { get; set; }
        public virtual DbSet<WRBHBKOTUser> WRBHBKOTUsers { get; set; }
        public virtual DbSet<WRBHBLocality> WRBHBLocalities { get; set; }
        public virtual DbSet<WRBHBMapPOAndVendorPaymentDtl> WRBHBMapPOAndVendorPaymentDtls { get; set; }
        public virtual DbSet<WRBHBMapPOAndVendorPaymentHdr> WRBHBMapPOAndVendorPaymentHdrs { get; set; }
        public virtual DbSet<WRBHBMapVendor> WRBHBMapVendors { get; set; }
        public virtual DbSet<WRBHBMarkup> WRBHBMarkups { get; set; }
        public virtual DbSet<WRBHBMasterClientManagement> WRBHBMasterClientManagements { get; set; }
        public virtual DbSet<WRBHBMMTMarkup> WRBHBMMTMarkups { get; set; }
        public virtual DbSet<WRBHBMMTMarkupHistory> WRBHBMMTMarkupHistories { get; set; }
        public virtual DbSet<WRBHBNewPCExpenseApproval> WRBHBNewPCExpenseApprovals { get; set; }
        public virtual DbSet<WRBHBOutsourceServiceItem> WRBHBOutsourceServiceItems { get; set; }
        public virtual DbSet<WRBHBPCExpenseApproval> WRBHBPCExpenseApprovals { get; set; }
        public virtual DbSet<WRBHBPettyCash> WRBHBPettyCashes { get; set; }
        public virtual DbSet<WRBHBPettyCashApprovalDtl> WRBHBPettyCashApprovalDtls { get; set; }
        public virtual DbSet<WRBHBPettyCashHdr> WRBHBPettyCashHdrs { get; set; }
        public virtual DbSet<WRBHBPettyCashStatu> WRBHBPettyCashStatus { get; set; }
        public virtual DbSet<WRBHBPettyCashStatusHdr> WRBHBPettyCashStatusHdrs { get; set; }
        public virtual DbSet<WRBHBProperty> WRBHBProperties { get; set; }
        public virtual DbSet<WRBHBPropertyAgreement> WRBHBPropertyAgreements { get; set; }
        public virtual DbSet<WRBHBPropertyAgreementsAssociationName> WRBHBPropertyAgreementsAssociationNames { get; set; }
        public virtual DbSet<WRBHBPropertyAgreementsDetail> WRBHBPropertyAgreementsDetails { get; set; }
        public virtual DbSet<WRBHBPropertyAgreementsHistory> WRBHBPropertyAgreementsHistories { get; set; }
        public virtual DbSet<WRBHBPropertyAgreementsOwner> WRBHBPropertyAgreementsOwners { get; set; }
        public virtual DbSet<WRBHBPropertyAgreementsRoomCharge> WRBHBPropertyAgreementsRoomCharges { get; set; }
        public virtual DbSet<WRBHBPropertyAgreementsRoomChargesHistory> WRBHBPropertyAgreementsRoomChargesHistories { get; set; }
        public virtual DbSet<WRBHBPropertyAgreementsRoomType> WRBHBPropertyAgreementsRoomTypes { get; set; }
        public virtual DbSet<WRBHBPropertyApartment> WRBHBPropertyApartments { get; set; }
        public virtual DbSet<WRBHBPropertyApartmentHistory> WRBHBPropertyApartmentHistories { get; set; }
        public virtual DbSet<WRBHBPropertyBlock> WRBHBPropertyBlocks { get; set; }
        public virtual DbSet<WRBHBPropertyImage> WRBHBPropertyImages { get; set; }
        public virtual DbSet<WRBHBPropertyOwnerApartment> WRBHBPropertyOwnerApartments { get; set; }
        public virtual DbSet<WRBHBPropertyOwnerOtherContact> WRBHBPropertyOwnerOtherContacts { get; set; }
        public virtual DbSet<WRBHBPropertyOwnerProperty> WRBHBPropertyOwnerProperties { get; set; }
        public virtual DbSet<WRBHBPropertyOwner> WRBHBPropertyOwners { get; set; }
        public virtual DbSet<WRBHBPropertyRoomBed> WRBHBPropertyRoomBeds { get; set; }
        public virtual DbSet<WRBHBPropertyRoomBedsHistory> WRBHBPropertyRoomBedsHistories { get; set; }
        public virtual DbSet<WRBHBPropertyRoom> WRBHBPropertyRooms { get; set; }
        public virtual DbSet<WRBHBPropertyRoomsHistory> WRBHBPropertyRoomsHistories { get; set; }
        public virtual DbSet<WRBHBPropertyType> WRBHBPropertyTypes { get; set; }
        public virtual DbSet<WRBHBPropertyUser> WRBHBPropertyUsers { get; set; }
        public virtual DbSet<WRBHBReconcilePayment> WRBHBReconcilePayments { get; set; }
        public virtual DbSet<WRBHBReconcilePaymentRef> WRBHBReconcilePaymentRefs { get; set; }
        public virtual DbSet<WRBHBRole> WRBHBRoles { get; set; }
        public virtual DbSet<WRBHBRolesGroup> WRBHBRolesGroups { get; set; }
        public virtual DbSet<WRBHBRolesRight> WRBHBRolesRights { get; set; }
        public virtual DbSet<WRBHBScreenMaster> WRBHBScreenMasters { get; set; }
        public virtual DbSet<WRBHBSSPCodeGeneration> WRBHBSSPCodeGenerations { get; set; }
        public virtual DbSet<WRBHBSSPCodeGenerationApartment> WRBHBSSPCodeGenerationApartments { get; set; }
        public virtual DbSet<WRBHBSSPCodeGenerationRoom> WRBHBSSPCodeGenerationRooms { get; set; }
        public virtual DbSet<WRBHBSSPCodeGenerationService> WRBHBSSPCodeGenerationServices { get; set; }
        public virtual DbSet<WRBHBState> WRBHBStates { get; set; }
        public virtual DbSet<WRBHBStaticHotel> WRBHBStaticHotels { get; set; }
        public virtual DbSet<WRBHBStaticHotels123> WRBHBStaticHotels123 { get; set; }
        public virtual DbSet<WRBHBTaxMapping> WRBHBTaxMappings { get; set; }
        public virtual DbSet<WRBHBTDSDeclaration> WRBHBTDSDeclarations { get; set; }
        public virtual DbSet<WRBHBTDSSlab> WRBHBTDSSlabs { get; set; }
        public virtual DbSet<WRBHBTiaAndNTia> WRBHBTiaAndNTias { get; set; }
        public virtual DbSet<WRBHBTransSubsPriceModel> WRBHBTransSubsPriceModels { get; set; }
        public virtual DbSet<WRBHBTripAdvicerData> WRBHBTripAdvicerDatas { get; set; }
        public virtual DbSet<WRBHBUser> WRBHBUsers { get; set; }
        public virtual DbSet<WRBHBUserGroup> WRBHBUserGroups { get; set; }
        public virtual DbSet<WRBHBUserRole> WRBHBUserRoles { get; set; }
        public virtual DbSet<WRBHBVendor> WRBHBVendors { get; set; }
        public virtual DbSet<WRBHBVendorAdvancePayment> WRBHBVendorAdvancePayments { get; set; }
        public virtual DbSet<WRBHBVendorCategory> WRBHBVendorCategories { get; set; }
        public virtual DbSet<WRBHBVendorChequeApprovalDtl> WRBHBVendorChequeApprovalDtls { get; set; }
        public virtual DbSet<WRBHBVendorChequeApprovalNewDtl> WRBHBVendorChequeApprovalNewDtls { get; set; }
        public virtual DbSet<WRBHBVendorCost> WRBHBVendorCosts { get; set; }
        public virtual DbSet<WRBHBVendorRequest> WRBHBVendorRequests { get; set; }
        public virtual DbSet<WRBHBVendorRequestDtl> WRBHBVendorRequestDtls { get; set; }
        public virtual DbSet<WRBHBVendorRequestTemp> WRBHBVendorRequestTemps { get; set; }
        public virtual DbSet<WRBHBVendorRequestTempDtl> WRBHBVendorRequestTempDtls { get; set; }
        public virtual DbSet<WRBHBVendorSettlementAdjusmentAdvanceAmount> WRBHBVendorSettlementAdjusmentAdvanceAmounts { get; set; }
        public virtual DbSet<WRBHBVendorSettlementHdr> WRBHBVendorSettlementHdrs { get; set; }
        public virtual DbSet<WRBHBVendorSettlementInvoiceAmount> WRBHBVendorSettlementInvoiceAmounts { get; set; }
        public virtual DbSet<WRBHBVendorSettlementPaidAmount> WRBHBVendorSettlementPaidAmounts { get; set; }
        public virtual DbSet<WRBHBVendorSettlementTACInvoiceAmount> WRBHBVendorSettlementTACInvoiceAmounts { get; set; }
        public virtual DbSet<WRBHBContractProductSubMaster> WRBHBContractProductSubMasters { get; set; }
        public virtual DbSet<WRBHBLaundrServiceDtl> WRBHBLaundrServiceDtls { get; set; }
        public virtual DbSet<WRBHBLaundrServiceHdr> WRBHBLaundrServiceHdrs { get; set; }
        public virtual DbSet<WRBHBNewKOTEntryDtl> WRBHBNewKOTEntryDtls { get; set; }
        public virtual DbSet<WRBHBNewKOTEntryHdr> WRBHBNewKOTEntryHdrs { get; set; }
        public virtual DbSet<WRBHBNewKOTUserEntryDtl> WRBHBNewKOTUserEntryDtls { get; set; }
        public virtual DbSet<WRBHBNewKOTUserEntryHdr> WRBHBNewKOTUserEntryHdrs { get; set; }
        public virtual DbSet<WRBHBNewPettyCashApprovalDtl> WRBHBNewPettyCashApprovalDtls { get; set; }
        public virtual DbSet<WRBHBNewPettyCashApprovalHdr> WRBHBNewPettyCashApprovalHdrs { get; set; }
        public virtual DbSet<WRBHBOutsourceKOTDtl> WRBHBOutsourceKOTDtls { get; set; }
        public virtual DbSet<WRBHBOutsourceKOTHdr> WRBHBOutsourceKOTHdrs { get; set; }
        public virtual DbSet<WRBHBPettyCashApprovalHdr> WRBHBPettyCashApprovalHdrs { get; set; }
        public virtual DbSet<WRBHBReference> WRBHBReferences { get; set; }
        public virtual DbSet<WRBHBTaxMaster> WRBHBTaxMasters { get; set; }
        public virtual DbSet<WRBHBVendorChequeApprovalHdr> WRBHBVendorChequeApprovalHdrs { get; set; }
        public virtual DbSet<WRBHBVendorChequeApprovalNewHdr> WRBHBVendorChequeApprovalNewHdrs { get; set; }
        public virtual DbSet<WRBHBVendorRequestType> WRBHBVendorRequestTypes { get; set; }
        public virtual DbSet<UserProfile> UserProfiles { get; set; }
        public virtual DbSet<WRBHBClientManagementAddClientGuest> WRBHBClientManagementAddClientGuests { get; set; }
        public virtual DbSet<WrbhbTravelDesk> WrbhbTravelDesks { get; set; }
    
        public virtual ObjectResult<SP_BookingPropertyDtls_Help_FrontEnd> SP_BookingPropertyDtls_Help_FrontEnd(string chkInDt, string chkOutDt, Nullable<long> clientId, Nullable<long> propertyId, string bookingLevel, string propertyType)
        {
            var chkInDtParameter = chkInDt != null ?
                new ObjectParameter("ChkInDt", chkInDt) :
                new ObjectParameter("ChkInDt", typeof(string));
    
            var chkOutDtParameter = chkOutDt != null ?
                new ObjectParameter("ChkOutDt", chkOutDt) :
                new ObjectParameter("ChkOutDt", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var bookingLevelParameter = bookingLevel != null ?
                new ObjectParameter("BookingLevel", bookingLevel) :
                new ObjectParameter("BookingLevel", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BookingPropertyDtls_Help_FrontEnd>("SP_BookingPropertyDtls_Help_FrontEnd", chkInDtParameter, chkOutDtParameter, clientIdParameter, propertyIdParameter, bookingLevelParameter, propertyTypeParameter);
        }
    
        public virtual ObjectResult<DecryptPswd_Result> DecryptPswd(string action, string userEmail)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DecryptPswd_Result>("DecryptPswd", actionParameter, userEmailParameter);
        }
    
        public virtual ObjectResult<SP_BedBookingProperty_Insert_FrontEnd_Result> SP_BedBookingProperty_Insert_FrontEnd(Nullable<long> bookingId, string propertyName, Nullable<long> propertyId, string getType, string propertyType, Nullable<decimal> tariff, string phone, string email, string locality, Nullable<long> localityId, Nullable<long> usrId, Nullable<bool> rs, Nullable<bool> per, Nullable<decimal> discountAllowed, Nullable<decimal> discount, Nullable<decimal> discountTariff)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var getTypeParameter = getType != null ?
                new ObjectParameter("GetType", getType) :
                new ObjectParameter("GetType", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(decimal));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var localityIdParameter = localityId.HasValue ?
                new ObjectParameter("LocalityId", localityId) :
                new ObjectParameter("LocalityId", typeof(long));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            var rsParameter = rs.HasValue ?
                new ObjectParameter("Rs", rs) :
                new ObjectParameter("Rs", typeof(bool));
    
            var perParameter = per.HasValue ?
                new ObjectParameter("Per", per) :
                new ObjectParameter("Per", typeof(bool));
    
            var discountAllowedParameter = discountAllowed.HasValue ?
                new ObjectParameter("DiscountAllowed", discountAllowed) :
                new ObjectParameter("DiscountAllowed", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discountTariffParameter = discountTariff.HasValue ?
                new ObjectParameter("DiscountTariff", discountTariff) :
                new ObjectParameter("DiscountTariff", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BedBookingProperty_Insert_FrontEnd_Result>("SP_BedBookingProperty_Insert_FrontEnd", bookingIdParameter, propertyNameParameter, propertyIdParameter, getTypeParameter, propertyTypeParameter, tariffParameter, phoneParameter, emailParameter, localityParameter, localityIdParameter, usrIdParameter, rsParameter, perParameter, discountAllowedParameter, discountParameter, discountTariffParameter);
        }
    
        public virtual ObjectResult<SP_BookingProperty_Insert_FrontEnd_Result> SP_BookingProperty_Insert_FrontEnd(Nullable<long> bookingId, string propertyName, Nullable<long> propertyId, string getType, string propertyType, string roomType, Nullable<decimal> singleTariff, Nullable<decimal> doubleTariff, Nullable<decimal> tripleTariff, Nullable<decimal> singleandMarkup, Nullable<decimal> doubleandMarkup, Nullable<decimal> tripleandMarkup, Nullable<decimal> markup, Nullable<decimal> singleandMarkup1, Nullable<decimal> doubleandMarkup1, Nullable<decimal> tripleandMarkup1, Nullable<bool> tAC, string inclusions, Nullable<bool> discountModeRS, Nullable<bool> discountModePer, Nullable<decimal> discountAllowed, string phone, string email, string locality, Nullable<long> localityId, Nullable<long> usrId, Nullable<long> markupId, Nullable<long> aPIHdrId, string ratePlanCode, string roomTypeCode, Nullable<int> propertyCnt, string taxAdded, Nullable<decimal> lTAgreed, Nullable<decimal> lTRack, Nullable<decimal> sTAgreed, Nullable<bool> taxInclusive, Nullable<decimal> baseTariff, Nullable<decimal> generalMarkup, Nullable<decimal> sC)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var getTypeParameter = getType != null ?
                new ObjectParameter("GetType", getType) :
                new ObjectParameter("GetType", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var singleTariffParameter = singleTariff.HasValue ?
                new ObjectParameter("SingleTariff", singleTariff) :
                new ObjectParameter("SingleTariff", typeof(decimal));
    
            var doubleTariffParameter = doubleTariff.HasValue ?
                new ObjectParameter("DoubleTariff", doubleTariff) :
                new ObjectParameter("DoubleTariff", typeof(decimal));
    
            var tripleTariffParameter = tripleTariff.HasValue ?
                new ObjectParameter("TripleTariff", tripleTariff) :
                new ObjectParameter("TripleTariff", typeof(decimal));
    
            var singleandMarkupParameter = singleandMarkup.HasValue ?
                new ObjectParameter("SingleandMarkup", singleandMarkup) :
                new ObjectParameter("SingleandMarkup", typeof(decimal));
    
            var doubleandMarkupParameter = doubleandMarkup.HasValue ?
                new ObjectParameter("DoubleandMarkup", doubleandMarkup) :
                new ObjectParameter("DoubleandMarkup", typeof(decimal));
    
            var tripleandMarkupParameter = tripleandMarkup.HasValue ?
                new ObjectParameter("TripleandMarkup", tripleandMarkup) :
                new ObjectParameter("TripleandMarkup", typeof(decimal));
    
            var markupParameter = markup.HasValue ?
                new ObjectParameter("Markup", markup) :
                new ObjectParameter("Markup", typeof(decimal));
    
            var singleandMarkup1Parameter = singleandMarkup1.HasValue ?
                new ObjectParameter("SingleandMarkup1", singleandMarkup1) :
                new ObjectParameter("SingleandMarkup1", typeof(decimal));
    
            var doubleandMarkup1Parameter = doubleandMarkup1.HasValue ?
                new ObjectParameter("DoubleandMarkup1", doubleandMarkup1) :
                new ObjectParameter("DoubleandMarkup1", typeof(decimal));
    
            var tripleandMarkup1Parameter = tripleandMarkup1.HasValue ?
                new ObjectParameter("TripleandMarkup1", tripleandMarkup1) :
                new ObjectParameter("TripleandMarkup1", typeof(decimal));
    
            var tACParameter = tAC.HasValue ?
                new ObjectParameter("TAC", tAC) :
                new ObjectParameter("TAC", typeof(bool));
    
            var inclusionsParameter = inclusions != null ?
                new ObjectParameter("Inclusions", inclusions) :
                new ObjectParameter("Inclusions", typeof(string));
    
            var discountModeRSParameter = discountModeRS.HasValue ?
                new ObjectParameter("DiscountModeRS", discountModeRS) :
                new ObjectParameter("DiscountModeRS", typeof(bool));
    
            var discountModePerParameter = discountModePer.HasValue ?
                new ObjectParameter("DiscountModePer", discountModePer) :
                new ObjectParameter("DiscountModePer", typeof(bool));
    
            var discountAllowedParameter = discountAllowed.HasValue ?
                new ObjectParameter("DiscountAllowed", discountAllowed) :
                new ObjectParameter("DiscountAllowed", typeof(decimal));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var localityIdParameter = localityId.HasValue ?
                new ObjectParameter("LocalityId", localityId) :
                new ObjectParameter("LocalityId", typeof(long));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            var markupIdParameter = markupId.HasValue ?
                new ObjectParameter("MarkupId", markupId) :
                new ObjectParameter("MarkupId", typeof(long));
    
            var aPIHdrIdParameter = aPIHdrId.HasValue ?
                new ObjectParameter("APIHdrId", aPIHdrId) :
                new ObjectParameter("APIHdrId", typeof(long));
    
            var ratePlanCodeParameter = ratePlanCode != null ?
                new ObjectParameter("RatePlanCode", ratePlanCode) :
                new ObjectParameter("RatePlanCode", typeof(string));
    
            var roomTypeCodeParameter = roomTypeCode != null ?
                new ObjectParameter("RoomTypeCode", roomTypeCode) :
                new ObjectParameter("RoomTypeCode", typeof(string));
    
            var propertyCntParameter = propertyCnt.HasValue ?
                new ObjectParameter("PropertyCnt", propertyCnt) :
                new ObjectParameter("PropertyCnt", typeof(int));
    
            var taxAddedParameter = taxAdded != null ?
                new ObjectParameter("TaxAdded", taxAdded) :
                new ObjectParameter("TaxAdded", typeof(string));
    
            var lTAgreedParameter = lTAgreed.HasValue ?
                new ObjectParameter("LTAgreed", lTAgreed) :
                new ObjectParameter("LTAgreed", typeof(decimal));
    
            var lTRackParameter = lTRack.HasValue ?
                new ObjectParameter("LTRack", lTRack) :
                new ObjectParameter("LTRack", typeof(decimal));
    
            var sTAgreedParameter = sTAgreed.HasValue ?
                new ObjectParameter("STAgreed", sTAgreed) :
                new ObjectParameter("STAgreed", typeof(decimal));
    
            var taxInclusiveParameter = taxInclusive.HasValue ?
                new ObjectParameter("TaxInclusive", taxInclusive) :
                new ObjectParameter("TaxInclusive", typeof(bool));
    
            var baseTariffParameter = baseTariff.HasValue ?
                new ObjectParameter("BaseTariff", baseTariff) :
                new ObjectParameter("BaseTariff", typeof(decimal));
    
            var generalMarkupParameter = generalMarkup.HasValue ?
                new ObjectParameter("GeneralMarkup", generalMarkup) :
                new ObjectParameter("GeneralMarkup", typeof(decimal));
    
            var sCParameter = sC.HasValue ?
                new ObjectParameter("SC", sC) :
                new ObjectParameter("SC", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BookingProperty_Insert_FrontEnd_Result>("SP_BookingProperty_Insert_FrontEnd", bookingIdParameter, propertyNameParameter, propertyIdParameter, getTypeParameter, propertyTypeParameter, roomTypeParameter, singleTariffParameter, doubleTariffParameter, tripleTariffParameter, singleandMarkupParameter, doubleandMarkupParameter, tripleandMarkupParameter, markupParameter, singleandMarkup1Parameter, doubleandMarkup1Parameter, tripleandMarkup1Parameter, tACParameter, inclusionsParameter, discountModeRSParameter, discountModePerParameter, discountAllowedParameter, phoneParameter, emailParameter, localityParameter, localityIdParameter, usrIdParameter, markupIdParameter, aPIHdrIdParameter, ratePlanCodeParameter, roomTypeCodeParameter, propertyCntParameter, taxAddedParameter, lTAgreedParameter, lTRackParameter, sTAgreedParameter, taxInclusiveParameter, baseTariffParameter, generalMarkupParameter, sCParameter);
        }
    
        public virtual ObjectResult<Sp_BookingGuestDetails_Insert_FrontEnd_Result> Sp_BookingGuestDetails_Insert_FrontEnd(Nullable<long> bookingId, Nullable<long> guestId, string designation, string firstName, string lastName, string emailId, string empCode, Nullable<long> usrId, string grade, Nullable<int> gradeId, string nationality, string mobileNo, string title)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var guestIdParameter = guestId.HasValue ?
                new ObjectParameter("GuestId", guestId) :
                new ObjectParameter("GuestId", typeof(long));
    
            var designationParameter = designation != null ?
                new ObjectParameter("Designation", designation) :
                new ObjectParameter("Designation", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var emailIdParameter = emailId != null ?
                new ObjectParameter("EmailId", emailId) :
                new ObjectParameter("EmailId", typeof(string));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(int));
    
            var nationalityParameter = nationality != null ?
                new ObjectParameter("Nationality", nationality) :
                new ObjectParameter("Nationality", typeof(string));
    
            var mobileNoParameter = mobileNo != null ?
                new ObjectParameter("MobileNo", mobileNo) :
                new ObjectParameter("MobileNo", typeof(string));
    
            var titleParameter = title != null ?
                new ObjectParameter("Title", title) :
                new ObjectParameter("Title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_BookingGuestDetails_Insert_FrontEnd_Result>("Sp_BookingGuestDetails_Insert_FrontEnd", bookingIdParameter, guestIdParameter, designationParameter, firstNameParameter, lastNameParameter, emailIdParameter, empCodeParameter, usrIdParameter, gradeParameter, gradeIdParameter, nationalityParameter, mobileNoParameter, titleParameter);
        }
    
        public virtual ObjectResult<SP_BookingPropertyAssingedGuest_Insert_FrontEnd_Result> SP_BookingPropertyAssingedGuest_Insert_FrontEnd(Nullable<long> bookingId, string empCode, string firstName, string lastName, Nullable<long> guestId, string occupancy, string roomType, string servicePaymentMode, string tariffPaymentMode, Nullable<decimal> tariff, Nullable<long> roomId, Nullable<long> bookingPropertyId, Nullable<long> bookingPropertyTableId, Nullable<long> usrId, Nullable<long> sSPId, Nullable<int> roomCaptured, string column1, string column2, string column3, string column4, string column5, string column6, string column7, string column8, string column9, string column10, string bTCFilePath)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var guestIdParameter = guestId.HasValue ?
                new ObjectParameter("GuestId", guestId) :
                new ObjectParameter("GuestId", typeof(long));
    
            var occupancyParameter = occupancy != null ?
                new ObjectParameter("Occupancy", occupancy) :
                new ObjectParameter("Occupancy", typeof(string));
    
            var roomTypeParameter = roomType != null ?
                new ObjectParameter("RoomType", roomType) :
                new ObjectParameter("RoomType", typeof(string));
    
            var servicePaymentModeParameter = servicePaymentMode != null ?
                new ObjectParameter("ServicePaymentMode", servicePaymentMode) :
                new ObjectParameter("ServicePaymentMode", typeof(string));
    
            var tariffPaymentModeParameter = tariffPaymentMode != null ?
                new ObjectParameter("TariffPaymentMode", tariffPaymentMode) :
                new ObjectParameter("TariffPaymentMode", typeof(string));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(decimal));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(long));
    
            var bookingPropertyIdParameter = bookingPropertyId.HasValue ?
                new ObjectParameter("BookingPropertyId", bookingPropertyId) :
                new ObjectParameter("BookingPropertyId", typeof(long));
    
            var bookingPropertyTableIdParameter = bookingPropertyTableId.HasValue ?
                new ObjectParameter("BookingPropertyTableId", bookingPropertyTableId) :
                new ObjectParameter("BookingPropertyTableId", typeof(long));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            var sSPIdParameter = sSPId.HasValue ?
                new ObjectParameter("SSPId", sSPId) :
                new ObjectParameter("SSPId", typeof(long));
    
            var roomCapturedParameter = roomCaptured.HasValue ?
                new ObjectParameter("RoomCaptured", roomCaptured) :
                new ObjectParameter("RoomCaptured", typeof(int));
    
            var column1Parameter = column1 != null ?
                new ObjectParameter("Column1", column1) :
                new ObjectParameter("Column1", typeof(string));
    
            var column2Parameter = column2 != null ?
                new ObjectParameter("Column2", column2) :
                new ObjectParameter("Column2", typeof(string));
    
            var column3Parameter = column3 != null ?
                new ObjectParameter("Column3", column3) :
                new ObjectParameter("Column3", typeof(string));
    
            var column4Parameter = column4 != null ?
                new ObjectParameter("Column4", column4) :
                new ObjectParameter("Column4", typeof(string));
    
            var column5Parameter = column5 != null ?
                new ObjectParameter("Column5", column5) :
                new ObjectParameter("Column5", typeof(string));
    
            var column6Parameter = column6 != null ?
                new ObjectParameter("Column6", column6) :
                new ObjectParameter("Column6", typeof(string));
    
            var column7Parameter = column7 != null ?
                new ObjectParameter("Column7", column7) :
                new ObjectParameter("Column7", typeof(string));
    
            var column8Parameter = column8 != null ?
                new ObjectParameter("Column8", column8) :
                new ObjectParameter("Column8", typeof(string));
    
            var column9Parameter = column9 != null ?
                new ObjectParameter("Column9", column9) :
                new ObjectParameter("Column9", typeof(string));
    
            var column10Parameter = column10 != null ?
                new ObjectParameter("Column10", column10) :
                new ObjectParameter("Column10", typeof(string));
    
            var bTCFilePathParameter = bTCFilePath != null ?
                new ObjectParameter("BTCFilePath", bTCFilePath) :
                new ObjectParameter("BTCFilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BookingPropertyAssingedGuest_Insert_FrontEnd_Result>("SP_BookingPropertyAssingedGuest_Insert_FrontEnd", bookingIdParameter, empCodeParameter, firstNameParameter, lastNameParameter, guestIdParameter, occupancyParameter, roomTypeParameter, servicePaymentModeParameter, tariffPaymentModeParameter, tariffParameter, roomIdParameter, bookingPropertyIdParameter, bookingPropertyTableIdParameter, usrIdParameter, sSPIdParameter, roomCapturedParameter, column1Parameter, column2Parameter, column3Parameter, column4Parameter, column5Parameter, column6Parameter, column7Parameter, column8Parameter, column9Parameter, column10Parameter, bTCFilePathParameter);
        }
    
        public virtual int SP_BookingDtls_Help_FrontEnd(string action, string str, Nullable<long> id)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var strParameter = str != null ?
                new ObjectParameter("Str", str) :
                new ObjectParameter("Str", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_BookingDtls_Help_FrontEnd", actionParameter, strParameter, idParameter);
        }
    
        public virtual ObjectResult<DecryptPswdClientGuestTable_Result> DecryptPswdClientGuestTable(string action, string userEmail)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("UserEmail", userEmail) :
                new ObjectParameter("UserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<DecryptPswdClientGuestTable_Result>("DecryptPswdClientGuestTable", actionParameter, userEmailParameter);
        }
    
        public virtual ObjectResult<Sp_Booking_Insert_FrontEnd_Result> Sp_Booking_Insert_FrontEnd(Nullable<long> clientId, Nullable<long> gradeId, Nullable<long> stateId, Nullable<long> cityId, string clientName, string checkInDate, string expectedChkInTime, string checkOutDate, string gradeName, string stateName, string cityName, Nullable<long> usrId, string sales, string cRM, Nullable<long> clientBookerId, string clientBookerName, string clientBookerEmail, Nullable<bool> emailtoGuest, string note, string specialRequirements, string status, string aMPM, string bookingLevel, Nullable<bool> hRPolicy, string hRPolicyOverrideRemarks, string propertyRefNo)
        {
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(long));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var clientNameParameter = clientName != null ?
                new ObjectParameter("ClientName", clientName) :
                new ObjectParameter("ClientName", typeof(string));
    
            var checkInDateParameter = checkInDate != null ?
                new ObjectParameter("CheckInDate", checkInDate) :
                new ObjectParameter("CheckInDate", typeof(string));
    
            var expectedChkInTimeParameter = expectedChkInTime != null ?
                new ObjectParameter("ExpectedChkInTime", expectedChkInTime) :
                new ObjectParameter("ExpectedChkInTime", typeof(string));
    
            var checkOutDateParameter = checkOutDate != null ?
                new ObjectParameter("CheckOutDate", checkOutDate) :
                new ObjectParameter("CheckOutDate", typeof(string));
    
            var gradeNameParameter = gradeName != null ?
                new ObjectParameter("GradeName", gradeName) :
                new ObjectParameter("GradeName", typeof(string));
    
            var stateNameParameter = stateName != null ?
                new ObjectParameter("StateName", stateName) :
                new ObjectParameter("StateName", typeof(string));
    
            var cityNameParameter = cityName != null ?
                new ObjectParameter("CityName", cityName) :
                new ObjectParameter("CityName", typeof(string));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            var salesParameter = sales != null ?
                new ObjectParameter("Sales", sales) :
                new ObjectParameter("Sales", typeof(string));
    
            var cRMParameter = cRM != null ?
                new ObjectParameter("CRM", cRM) :
                new ObjectParameter("CRM", typeof(string));
    
            var clientBookerIdParameter = clientBookerId.HasValue ?
                new ObjectParameter("ClientBookerId", clientBookerId) :
                new ObjectParameter("ClientBookerId", typeof(long));
    
            var clientBookerNameParameter = clientBookerName != null ?
                new ObjectParameter("ClientBookerName", clientBookerName) :
                new ObjectParameter("ClientBookerName", typeof(string));
    
            var clientBookerEmailParameter = clientBookerEmail != null ?
                new ObjectParameter("ClientBookerEmail", clientBookerEmail) :
                new ObjectParameter("ClientBookerEmail", typeof(string));
    
            var emailtoGuestParameter = emailtoGuest.HasValue ?
                new ObjectParameter("EmailtoGuest", emailtoGuest) :
                new ObjectParameter("EmailtoGuest", typeof(bool));
    
            var noteParameter = note != null ?
                new ObjectParameter("Note", note) :
                new ObjectParameter("Note", typeof(string));
    
            var specialRequirementsParameter = specialRequirements != null ?
                new ObjectParameter("SpecialRequirements", specialRequirements) :
                new ObjectParameter("SpecialRequirements", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var aMPMParameter = aMPM != null ?
                new ObjectParameter("AMPM", aMPM) :
                new ObjectParameter("AMPM", typeof(string));
    
            var bookingLevelParameter = bookingLevel != null ?
                new ObjectParameter("BookingLevel", bookingLevel) :
                new ObjectParameter("BookingLevel", typeof(string));
    
            var hRPolicyParameter = hRPolicy.HasValue ?
                new ObjectParameter("HRPolicy", hRPolicy) :
                new ObjectParameter("HRPolicy", typeof(bool));
    
            var hRPolicyOverrideRemarksParameter = hRPolicyOverrideRemarks != null ?
                new ObjectParameter("HRPolicyOverrideRemarks", hRPolicyOverrideRemarks) :
                new ObjectParameter("HRPolicyOverrideRemarks", typeof(string));
    
            var propertyRefNoParameter = propertyRefNo != null ?
                new ObjectParameter("PropertyRefNo", propertyRefNo) :
                new ObjectParameter("PropertyRefNo", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Sp_Booking_Insert_FrontEnd_Result>("Sp_Booking_Insert_FrontEnd", clientIdParameter, gradeIdParameter, stateIdParameter, cityIdParameter, clientNameParameter, checkInDateParameter, expectedChkInTimeParameter, checkOutDateParameter, gradeNameParameter, stateNameParameter, cityNameParameter, usrIdParameter, salesParameter, cRMParameter, clientBookerIdParameter, clientBookerNameParameter, clientBookerEmailParameter, emailtoGuestParameter, noteParameter, specialRequirementsParameter, statusParameter, aMPMParameter, bookingLevelParameter, hRPolicyParameter, hRPolicyOverrideRemarksParameter, propertyRefNoParameter);
        }
    
        public virtual ObjectResult<SP_BedBookingPropertyAssingedGuest_Insert_FrontEnd_Result> SP_BedBookingPropertyAssingedGuest_Insert_FrontEnd(Nullable<long> bookingId, string empCode, string firstName, string lastName, Nullable<long> guestId, string bedType, string servicePaymentMode, string tariffPaymentMode, Nullable<decimal> tariff, Nullable<long> roomId, Nullable<long> bedId, Nullable<long> bookingPropertyId, Nullable<long> bookingPropertyTableId, Nullable<long> usrId, Nullable<long> sSPId, string column1, string column2, string column3, string column4, string column5, string column6, string column7, string column8, string column9, string column10, string bTCFilePath, Nullable<int> roomCaptured)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var guestIdParameter = guestId.HasValue ?
                new ObjectParameter("GuestId", guestId) :
                new ObjectParameter("GuestId", typeof(long));
    
            var bedTypeParameter = bedType != null ?
                new ObjectParameter("BedType", bedType) :
                new ObjectParameter("BedType", typeof(string));
    
            var servicePaymentModeParameter = servicePaymentMode != null ?
                new ObjectParameter("ServicePaymentMode", servicePaymentMode) :
                new ObjectParameter("ServicePaymentMode", typeof(string));
    
            var tariffPaymentModeParameter = tariffPaymentMode != null ?
                new ObjectParameter("TariffPaymentMode", tariffPaymentMode) :
                new ObjectParameter("TariffPaymentMode", typeof(string));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(decimal));
    
            var roomIdParameter = roomId.HasValue ?
                new ObjectParameter("RoomId", roomId) :
                new ObjectParameter("RoomId", typeof(long));
    
            var bedIdParameter = bedId.HasValue ?
                new ObjectParameter("BedId", bedId) :
                new ObjectParameter("BedId", typeof(long));
    
            var bookingPropertyIdParameter = bookingPropertyId.HasValue ?
                new ObjectParameter("BookingPropertyId", bookingPropertyId) :
                new ObjectParameter("BookingPropertyId", typeof(long));
    
            var bookingPropertyTableIdParameter = bookingPropertyTableId.HasValue ?
                new ObjectParameter("BookingPropertyTableId", bookingPropertyTableId) :
                new ObjectParameter("BookingPropertyTableId", typeof(long));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            var sSPIdParameter = sSPId.HasValue ?
                new ObjectParameter("SSPId", sSPId) :
                new ObjectParameter("SSPId", typeof(long));
    
            var column1Parameter = column1 != null ?
                new ObjectParameter("Column1", column1) :
                new ObjectParameter("Column1", typeof(string));
    
            var column2Parameter = column2 != null ?
                new ObjectParameter("Column2", column2) :
                new ObjectParameter("Column2", typeof(string));
    
            var column3Parameter = column3 != null ?
                new ObjectParameter("Column3", column3) :
                new ObjectParameter("Column3", typeof(string));
    
            var column4Parameter = column4 != null ?
                new ObjectParameter("Column4", column4) :
                new ObjectParameter("Column4", typeof(string));
    
            var column5Parameter = column5 != null ?
                new ObjectParameter("Column5", column5) :
                new ObjectParameter("Column5", typeof(string));
    
            var column6Parameter = column6 != null ?
                new ObjectParameter("Column6", column6) :
                new ObjectParameter("Column6", typeof(string));
    
            var column7Parameter = column7 != null ?
                new ObjectParameter("Column7", column7) :
                new ObjectParameter("Column7", typeof(string));
    
            var column8Parameter = column8 != null ?
                new ObjectParameter("Column8", column8) :
                new ObjectParameter("Column8", typeof(string));
    
            var column9Parameter = column9 != null ?
                new ObjectParameter("Column9", column9) :
                new ObjectParameter("Column9", typeof(string));
    
            var column10Parameter = column10 != null ?
                new ObjectParameter("Column10", column10) :
                new ObjectParameter("Column10", typeof(string));
    
            var bTCFilePathParameter = bTCFilePath != null ?
                new ObjectParameter("BTCFilePath", bTCFilePath) :
                new ObjectParameter("BTCFilePath", typeof(string));
    
            var roomCapturedParameter = roomCaptured.HasValue ?
                new ObjectParameter("RoomCaptured", roomCaptured) :
                new ObjectParameter("RoomCaptured", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BedBookingPropertyAssingedGuest_Insert_FrontEnd_Result>("SP_BedBookingPropertyAssingedGuest_Insert_FrontEnd", bookingIdParameter, empCodeParameter, firstNameParameter, lastNameParameter, guestIdParameter, bedTypeParameter, servicePaymentModeParameter, tariffPaymentModeParameter, tariffParameter, roomIdParameter, bedIdParameter, bookingPropertyIdParameter, bookingPropertyTableIdParameter, usrIdParameter, sSPIdParameter, column1Parameter, column2Parameter, column3Parameter, column4Parameter, column5Parameter, column6Parameter, column7Parameter, column8Parameter, column9Parameter, column10Parameter, bTCFilePathParameter, roomCapturedParameter);
        }
    
        public virtual ObjectResult<SP_BookingPropertyDtls_Help_SA_FrontEnd> SP_BookingPropertyDtls_Help_SA_FrontEnd(string chkInDt, string chkOutDt, Nullable<long> clientId, Nullable<long> propertyId, string bookingLevel, string propertyType)
        {
            var chkInDtParameter = chkInDt != null ?
                new ObjectParameter("ChkInDt", chkInDt) :
                new ObjectParameter("ChkInDt", typeof(string));
    
            var chkOutDtParameter = chkOutDt != null ?
                new ObjectParameter("ChkOutDt", chkOutDt) :
                new ObjectParameter("ChkOutDt", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var bookingLevelParameter = bookingLevel != null ?
                new ObjectParameter("BookingLevel", bookingLevel) :
                new ObjectParameter("BookingLevel", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BookingPropertyDtls_Help_SA_FrontEnd>("SP_BookingPropertyDtls_Help_SA_FrontEnd", chkInDtParameter, chkOutDtParameter, clientIdParameter, propertyIdParameter, bookingLevelParameter, propertyTypeParameter);
        }
    
        public virtual ObjectResult<SP_BookingPropertyDtls_Help_SA2_FrontEnd> SP_BookingPropertyDtls_Help_SA2_FrontEnd(string chkInDt, string chkOutDt, Nullable<long> clientId, Nullable<long> propertyId, string bookingLevel, string propertyType)
        {
            var chkInDtParameter = chkInDt != null ?
                new ObjectParameter("ChkInDt", chkInDt) :
                new ObjectParameter("ChkInDt", typeof(string));
    
            var chkOutDtParameter = chkOutDt != null ?
                new ObjectParameter("ChkOutDt", chkOutDt) :
                new ObjectParameter("ChkOutDt", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var bookingLevelParameter = bookingLevel != null ?
                new ObjectParameter("BookingLevel", bookingLevel) :
                new ObjectParameter("BookingLevel", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_BookingPropertyDtls_Help_SA2_FrontEnd>("SP_BookingPropertyDtls_Help_SA2_FrontEnd", chkInDtParameter, chkOutDtParameter, clientIdParameter, propertyIdParameter, bookingLevelParameter, propertyTypeParameter);
        }
    
        public virtual ObjectResult<SP_ApartmentBookingProperty_Insert_FrontEnd_Result> SP_ApartmentBookingProperty_Insert_FrontEnd(Nullable<long> bookingId, string propertyName, Nullable<long> propertyId, string getType, string propertyType, Nullable<decimal> tariff, Nullable<decimal> discount, Nullable<decimal> discountedTariff, string phone, string email, string locality, Nullable<long> localityId, Nullable<bool> rs, Nullable<bool> per, Nullable<decimal> discountAllowed, Nullable<long> usrId)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var propertyNameParameter = propertyName != null ?
                new ObjectParameter("PropertyName", propertyName) :
                new ObjectParameter("PropertyName", typeof(string));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var getTypeParameter = getType != null ?
                new ObjectParameter("GetType", getType) :
                new ObjectParameter("GetType", typeof(string));
    
            var propertyTypeParameter = propertyType != null ?
                new ObjectParameter("PropertyType", propertyType) :
                new ObjectParameter("PropertyType", typeof(string));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(decimal));
    
            var discountParameter = discount.HasValue ?
                new ObjectParameter("Discount", discount) :
                new ObjectParameter("Discount", typeof(decimal));
    
            var discountedTariffParameter = discountedTariff.HasValue ?
                new ObjectParameter("DiscountedTariff", discountedTariff) :
                new ObjectParameter("DiscountedTariff", typeof(decimal));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var localityParameter = locality != null ?
                new ObjectParameter("Locality", locality) :
                new ObjectParameter("Locality", typeof(string));
    
            var localityIdParameter = localityId.HasValue ?
                new ObjectParameter("LocalityId", localityId) :
                new ObjectParameter("LocalityId", typeof(long));
    
            var rsParameter = rs.HasValue ?
                new ObjectParameter("Rs", rs) :
                new ObjectParameter("Rs", typeof(bool));
    
            var perParameter = per.HasValue ?
                new ObjectParameter("Per", per) :
                new ObjectParameter("Per", typeof(bool));
    
            var discountAllowedParameter = discountAllowed.HasValue ?
                new ObjectParameter("DiscountAllowed", discountAllowed) :
                new ObjectParameter("DiscountAllowed", typeof(decimal));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ApartmentBookingProperty_Insert_FrontEnd_Result>("SP_ApartmentBookingProperty_Insert_FrontEnd", bookingIdParameter, propertyNameParameter, propertyIdParameter, getTypeParameter, propertyTypeParameter, tariffParameter, discountParameter, discountedTariffParameter, phoneParameter, emailParameter, localityParameter, localityIdParameter, rsParameter, perParameter, discountAllowedParameter, usrIdParameter);
        }
    
        public virtual ObjectResult<SP_ApartmentBookingPropertyAssingedGuest_Insert_FrontEnd_Result> SP_ApartmentBookingPropertyAssingedGuest_Insert_FrontEnd(Nullable<long> bookingId, string empCode, string firstName, string lastName, Nullable<long> guestId, string apartmentType, string servicePaymentMode, string tariffPaymentMode, Nullable<decimal> tariff, Nullable<long> apartmentId, Nullable<long> bookingPropertyId, Nullable<long> bookingPropertyTableId, Nullable<long> usrId, Nullable<long> sSPId, string column1, string column2, string column3, string column4, string column5, string column6, string column7, string column8, string column9, string column10, Nullable<int> roomCaptured, string bTCFilePath)
        {
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var guestIdParameter = guestId.HasValue ?
                new ObjectParameter("GuestId", guestId) :
                new ObjectParameter("GuestId", typeof(long));
    
            var apartmentTypeParameter = apartmentType != null ?
                new ObjectParameter("ApartmentType", apartmentType) :
                new ObjectParameter("ApartmentType", typeof(string));
    
            var servicePaymentModeParameter = servicePaymentMode != null ?
                new ObjectParameter("ServicePaymentMode", servicePaymentMode) :
                new ObjectParameter("ServicePaymentMode", typeof(string));
    
            var tariffPaymentModeParameter = tariffPaymentMode != null ?
                new ObjectParameter("TariffPaymentMode", tariffPaymentMode) :
                new ObjectParameter("TariffPaymentMode", typeof(string));
    
            var tariffParameter = tariff.HasValue ?
                new ObjectParameter("Tariff", tariff) :
                new ObjectParameter("Tariff", typeof(decimal));
    
            var apartmentIdParameter = apartmentId.HasValue ?
                new ObjectParameter("ApartmentId", apartmentId) :
                new ObjectParameter("ApartmentId", typeof(long));
    
            var bookingPropertyIdParameter = bookingPropertyId.HasValue ?
                new ObjectParameter("BookingPropertyId", bookingPropertyId) :
                new ObjectParameter("BookingPropertyId", typeof(long));
    
            var bookingPropertyTableIdParameter = bookingPropertyTableId.HasValue ?
                new ObjectParameter("BookingPropertyTableId", bookingPropertyTableId) :
                new ObjectParameter("BookingPropertyTableId", typeof(long));
    
            var usrIdParameter = usrId.HasValue ?
                new ObjectParameter("UsrId", usrId) :
                new ObjectParameter("UsrId", typeof(long));
    
            var sSPIdParameter = sSPId.HasValue ?
                new ObjectParameter("SSPId", sSPId) :
                new ObjectParameter("SSPId", typeof(long));
    
            var column1Parameter = column1 != null ?
                new ObjectParameter("Column1", column1) :
                new ObjectParameter("Column1", typeof(string));
    
            var column2Parameter = column2 != null ?
                new ObjectParameter("Column2", column2) :
                new ObjectParameter("Column2", typeof(string));
    
            var column3Parameter = column3 != null ?
                new ObjectParameter("Column3", column3) :
                new ObjectParameter("Column3", typeof(string));
    
            var column4Parameter = column4 != null ?
                new ObjectParameter("Column4", column4) :
                new ObjectParameter("Column4", typeof(string));
    
            var column5Parameter = column5 != null ?
                new ObjectParameter("Column5", column5) :
                new ObjectParameter("Column5", typeof(string));
    
            var column6Parameter = column6 != null ?
                new ObjectParameter("Column6", column6) :
                new ObjectParameter("Column6", typeof(string));
    
            var column7Parameter = column7 != null ?
                new ObjectParameter("Column7", column7) :
                new ObjectParameter("Column7", typeof(string));
    
            var column8Parameter = column8 != null ?
                new ObjectParameter("Column8", column8) :
                new ObjectParameter("Column8", typeof(string));
    
            var column9Parameter = column9 != null ?
                new ObjectParameter("Column9", column9) :
                new ObjectParameter("Column9", typeof(string));
    
            var column10Parameter = column10 != null ?
                new ObjectParameter("Column10", column10) :
                new ObjectParameter("Column10", typeof(string));
    
            var roomCapturedParameter = roomCaptured.HasValue ?
                new ObjectParameter("RoomCaptured", roomCaptured) :
                new ObjectParameter("RoomCaptured", typeof(int));
    
            var bTCFilePathParameter = bTCFilePath != null ?
                new ObjectParameter("BTCFilePath", bTCFilePath) :
                new ObjectParameter("BTCFilePath", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_ApartmentBookingPropertyAssingedGuest_Insert_FrontEnd_Result>("SP_ApartmentBookingPropertyAssingedGuest_Insert_FrontEnd", bookingIdParameter, empCodeParameter, firstNameParameter, lastNameParameter, guestIdParameter, apartmentTypeParameter, servicePaymentModeParameter, tariffPaymentModeParameter, tariffParameter, apartmentIdParameter, bookingPropertyIdParameter, bookingPropertyTableIdParameter, usrIdParameter, sSPIdParameter, column1Parameter, column2Parameter, column3Parameter, column4Parameter, column5Parameter, column6Parameter, column7Parameter, column8Parameter, column9Parameter, column10Parameter, roomCapturedParameter, bTCFilePathParameter);
        }
    
        public virtual ObjectResult<CitywithApiHeader_Result> CitywithApiHeader()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CitywithApiHeader_Result>("CitywithApiHeader");
        }
    
        public virtual ObjectResult<ClientAndUserId_Result> ClientAndUserId(Nullable<decimal> appId, string action)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(decimal));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientAndUserId_Result>("ClientAndUserId", appIdParameter, actionParameter);
        }
    
        public virtual ObjectResult<RowIdSearching_FrontEnd_Result> RowIdSearching_FrontEnd(string action, Nullable<long> bookingId, string rowId)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var bookingIdParameter = bookingId.HasValue ?
                new ObjectParameter("BookingId", bookingId) :
                new ObjectParameter("BookingId", typeof(long));
    
            var rowIdParameter = rowId != null ?
                new ObjectParameter("RowId", rowId) :
                new ObjectParameter("RowId", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<RowIdSearching_FrontEnd_Result>("RowIdSearching_FrontEnd", actionParameter, bookingIdParameter, rowIdParameter);
        }
    
        public virtual ObjectResult<SP_New_Booking_FrontEnd_Help_First> SP_New_Booking_FrontEnd_Help_First(string action, string str1, string str2, string chkInDt, string chkOutDt, Nullable<long> stateId, Nullable<long> cityId, Nullable<long> clientId, Nullable<long> propertyId, Nullable<long> gradeId, Nullable<long> id1, Nullable<long> id2, string conditionStr, Nullable<decimal> minRange, Nullable<decimal> maxRange, string ptyType)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var str1Parameter = str1 != null ?
                new ObjectParameter("Str1", str1) :
                new ObjectParameter("Str1", typeof(string));
    
            var str2Parameter = str2 != null ?
                new ObjectParameter("Str2", str2) :
                new ObjectParameter("Str2", typeof(string));
    
            var chkInDtParameter = chkInDt != null ?
                new ObjectParameter("ChkInDt", chkInDt) :
                new ObjectParameter("ChkInDt", typeof(string));
    
            var chkOutDtParameter = chkOutDt != null ?
                new ObjectParameter("ChkOutDt", chkOutDt) :
                new ObjectParameter("ChkOutDt", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(long));
    
            var id1Parameter = id1.HasValue ?
                new ObjectParameter("Id1", id1) :
                new ObjectParameter("Id1", typeof(long));
    
            var id2Parameter = id2.HasValue ?
                new ObjectParameter("Id2", id2) :
                new ObjectParameter("Id2", typeof(long));
    
            var conditionStrParameter = conditionStr != null ?
                new ObjectParameter("ConditionStr", conditionStr) :
                new ObjectParameter("ConditionStr", typeof(string));
    
            var minRangeParameter = minRange.HasValue ?
                new ObjectParameter("MinRange", minRange) :
                new ObjectParameter("MinRange", typeof(decimal));
    
            var maxRangeParameter = maxRange.HasValue ?
                new ObjectParameter("MaxRange", maxRange) :
                new ObjectParameter("MaxRange", typeof(decimal));
    
            var ptyTypeParameter = ptyType != null ?
                new ObjectParameter("PtyType", ptyType) :
                new ObjectParameter("PtyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_New_Booking_FrontEnd_Help_First>("SP_New_Booking_FrontEnd_Help_First", actionParameter, str1Parameter, str2Parameter, chkInDtParameter, chkOutDtParameter, stateIdParameter, cityIdParameter, clientIdParameter, propertyIdParameter, gradeIdParameter, id1Parameter, id2Parameter, conditionStrParameter, minRangeParameter, maxRangeParameter, ptyTypeParameter);
        }
    
        public virtual ObjectResult<SP_New_Booking_FrontEnd_Help_Second> SP_New_Booking_FrontEnd_Help(string action, string str1, string str2, string chkInDt, string chkOutDt, Nullable<long> stateId, Nullable<long> cityId, Nullable<long> clientId, Nullable<long> propertyId, Nullable<long> gradeId, Nullable<long> id1, Nullable<long> id2, string conditionStr, Nullable<decimal> minRange, Nullable<decimal> maxRange, string ptyType)
        {
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            var str1Parameter = str1 != null ?
                new ObjectParameter("Str1", str1) :
                new ObjectParameter("Str1", typeof(string));
    
            var str2Parameter = str2 != null ?
                new ObjectParameter("Str2", str2) :
                new ObjectParameter("Str2", typeof(string));
    
            var chkInDtParameter = chkInDt != null ?
                new ObjectParameter("ChkInDt", chkInDt) :
                new ObjectParameter("ChkInDt", typeof(string));
    
            var chkOutDtParameter = chkOutDt != null ?
                new ObjectParameter("ChkOutDt", chkOutDt) :
                new ObjectParameter("ChkOutDt", typeof(string));
    
            var stateIdParameter = stateId.HasValue ?
                new ObjectParameter("StateId", stateId) :
                new ObjectParameter("StateId", typeof(long));
    
            var cityIdParameter = cityId.HasValue ?
                new ObjectParameter("CityId", cityId) :
                new ObjectParameter("CityId", typeof(long));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            var propertyIdParameter = propertyId.HasValue ?
                new ObjectParameter("PropertyId", propertyId) :
                new ObjectParameter("PropertyId", typeof(long));
    
            var gradeIdParameter = gradeId.HasValue ?
                new ObjectParameter("GradeId", gradeId) :
                new ObjectParameter("GradeId", typeof(long));
    
            var id1Parameter = id1.HasValue ?
                new ObjectParameter("Id1", id1) :
                new ObjectParameter("Id1", typeof(long));
    
            var id2Parameter = id2.HasValue ?
                new ObjectParameter("Id2", id2) :
                new ObjectParameter("Id2", typeof(long));
    
            var conditionStrParameter = conditionStr != null ?
                new ObjectParameter("ConditionStr", conditionStr) :
                new ObjectParameter("ConditionStr", typeof(string));
    
            var minRangeParameter = minRange.HasValue ?
                new ObjectParameter("MinRange", minRange) :
                new ObjectParameter("MinRange", typeof(decimal));
    
            var maxRangeParameter = maxRange.HasValue ?
                new ObjectParameter("MaxRange", maxRange) :
                new ObjectParameter("MaxRange", typeof(decimal));
    
            var ptyTypeParameter = ptyType != null ?
                new ObjectParameter("PtyType", ptyType) :
                new ObjectParameter("PtyType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_New_Booking_FrontEnd_Help_Second>("SP_New_Booking_FrontEnd_Help", actionParameter, str1Parameter, str2Parameter, chkInDtParameter, chkOutDtParameter, stateIdParameter, cityIdParameter, clientIdParameter, propertyIdParameter, gradeIdParameter, id1Parameter, id2Parameter, conditionStrParameter, minRangeParameter, maxRangeParameter, ptyTypeParameter);
        }
    
        public virtual ObjectResult<ClientAndUserId_Flux_Result> ClientAndUserId_Flux(Nullable<decimal> appId, string action)
        {
            var appIdParameter = appId.HasValue ?
                new ObjectParameter("AppId", appId) :
                new ObjectParameter("AppId", typeof(decimal));
    
            var actionParameter = action != null ?
                new ObjectParameter("Action", action) :
                new ObjectParameter("Action", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClientAndUserId_Flux_Result>("ClientAndUserId_Flux", appIdParameter, actionParameter);
        }
    
        public virtual int InsertTravellerDtails_FrontEnd(string empCode, string firstName, string lastName, string phNo, string email, string grade, Nullable<long> clientId, Nullable<long> userId)
        {
            var empCodeParameter = empCode != null ?
                new ObjectParameter("EmpCode", empCode) :
                new ObjectParameter("EmpCode", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var phNoParameter = phNo != null ?
                new ObjectParameter("PhNo", phNo) :
                new ObjectParameter("PhNo", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var gradeParameter = grade != null ?
                new ObjectParameter("Grade", grade) :
                new ObjectParameter("Grade", typeof(string));
    
            var clientIdParameter = clientId.HasValue ?
                new ObjectParameter("ClientId", clientId) :
                new ObjectParameter("ClientId", typeof(long));
    
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertTravellerDtails_FrontEnd", empCodeParameter, firstNameParameter, lastNameParameter, phNoParameter, emailParameter, gradeParameter, clientIdParameter, userIdParameter);
        }
    }
}
